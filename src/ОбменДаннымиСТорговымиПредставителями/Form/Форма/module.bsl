Перем СписокТоваров;

Перем ПочтаЯщик;
Перем ПочтаПользователь;
Перем ПочтаПароль;
Перем ПочтаПопСервер;
Перем ПочтаСмтпСервер;

Функция ПодключитьсяКПочтовомуЯщику()
	Почта = Новый ИнтернетПочта;
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	Профиль.АдресСервераPOP3 = ПочтаПопСервер;
	Профиль.Пользователь = ПочтаПользователь;
	Профиль.Пароль = ПочтаПароль;
	Профиль.АдресСервераSMTP = ПочтаСмтпСервер;
	Профиль.ПользовательSMTP = ПочтаПользователь;
	Профиль.ПарольSMTP = ПочтаПароль;
	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	Профиль.ИспользоватьSSLPOP3 = Истина;
	Профиль.ИспользоватьSSLSMTP = Истина;
	Профиль.ПортPOP3 = 995;
	Профиль.ПортSMTP = 465;	
	
	Попытка
		Почта.Подключиться(Профиль);
	Исключение
		Сообщить("Ошибка при подключении к почтовому ящику! " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Почта;
КонецФункции

Процедура ЗаполнитьТаблицуТорговыхПредставителей() 
	ВидАдресДляОбмена = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес для обмена с планшетом");
	ВидВсеКонтрагенты = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Все контрагенты");
	
	Если ВидАдресДляОбмена.Пустая() Тогда
		Предупреждение("Нет вида контактной информации 'Адрес для обмена с планшетом'!");
		Возврат;
	КонецЕсли;
	
	Если ВидВсеКонтрагенты.Пустая() Тогда
		Предупреждение("Нет вида контактной информации 'Все контрагенты'!");
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект,
	|	КонтактнаяИнформация.Представление
	|ПОМЕСТИТЬ КонтактнаяИнформацияВсеКонтрагенты
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК EMail,
	|	КонтактнаяИнформация.Объект КАК ТорговыйПредставитель,
	|	ИСТИНА КАК Выгружать,
	|	ЕСТЬNULL(КонтактнаяИнформацияВсеКонтрагенты.Представление, ""Ложь"") КАК ВсеКонтрагенты
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформацияВсеКонтрагенты КАК КонтактнаяИнформацияВсеКонтрагенты
	|		ПО КонтактнаяИнформация.Объект = КонтактнаяИнформацияВсеКонтрагенты.Объект
	|ГДЕ
	|	КонтактнаяИнформация.Вид = &Вид
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонтактнаяИнформация.Объект";
	
	Запрос.УстановитьПараметр("Вид", ВидАдресДляОбмена);
	Запрос.УстановитьПараметр("Вид2", ВидВсеКонтрагенты);
	ТорговыеПредставители.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

Функция ПолучитьТекущуюДату()
	//ЗапуститьПриложение("w32tm /stripchart /computer:ntp.ru /samples:1 /dataonly >> """ + КаталогВременныхФайлов() + "curtime.txt""",,Истина);
	//Текст = Новый ТекстовыйДокумент;
	//Текст.Прочитать(КаталогВременныхФайлов() + "curtime.txt", КодировкаТекста.OEM);
	//ПоследняяСтрока = Текст.ПолучитьСтроку(Текст.КоличествоСтрок());
	//ПозицияПробела = Найти(ПоследняяСтрока, " ");
	//ПозицияСекунд = Найти(ПоследняяСтрока, "s");
	
	Возврат ТекущаяДата(); // + Число(Сред(ПоследняяСтрока, ПозицияПробела, ПозицияСекунд - ПозицияПробела));
КонецФункции

Процедура ПриОткрытии()
	ЗаполнитьТаблицуТорговыхПредставителей();
	
	ТекущаяДата = ПолучитьТекущуюДату();
	НачалоПериодаВзаиморасчеты = НачалоМесяца(ТекущаяДата);
КонецПроцедуры

Процедура ВыгрузитьТовары()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Товары.Наименование КАК Товар,
		|	Товары.Ссылка КАК ТоварСсылка,
		|	Товары.Родитель.Ссылка,
		|	Товары.БазоваяЕдиницаИзмерения.Наименование КАК Единица,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0)
		|	КОНЕЦ КАК Остаток
		|ИЗ
		|	Справочник.Номенклатура КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Склад В (&Склады)) КАК ТоварыНаСкладахОстатки
		|		ПО Товары.Ссылка = ТоварыНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	Товары.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
		|	И НЕ Товары.ПометкаУдаления";

	Запрос.УстановитьПараметр("ДатаОстатков", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("Склады", СкладыОстатков.ВыгрузитьКолонку("Склад"));

	Результат = Запрос.Выполнить();
	СписокРодителей = Новый Массив;
	СписокТоваров = Новый Массив;
	
	ТТ = Новый ТекстовыйДокумент;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокТоваров.Добавить(ВыборкаДетальныеЗаписи.ТоварСсылка);
		
		ТТ.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Товар);
		ТТ.ДобавитьСтроку(ВыборкаДетальныеЗаписи.ТоварСсылка.УникальныйИдентификатор());
		Если ВыборкаДетальныеЗаписи.РодительСсылка = Null Тогда
			ТТ.ДобавитьСтроку("00000000-0000-0000-0000-000000000000");
		Иначе
			ТТ.ДобавитьСтроку(ВыборкаДетальныеЗаписи.РодительСсылка.УникальныйИдентификатор());
		КонецЕсли;		
		ТТ.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Единица);
		ТТ.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.Остаток, "ЧН=; ЧГ=0"));
		
		ТекущийРодитель = ВыборкаДетальныеЗаписи.РодительСсылка;
		Пока ТекущийРодитель <> Null И Не ТекущийРодитель.Пустая() Цикл
			Если СписокРодителей.Найти(ТекущийРодитель) <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ТТ.ДобавитьСтроку(ТекущийРодитель.Наименование);
			ТТ.ДобавитьСтроку(ТекущийРодитель.УникальныйИдентификатор());
			ТТ.ДобавитьСтроку(ТекущийРодитель.Родитель.УникальныйИдентификатор());
			ТТ.ДобавитьСтроку("-1");
			ТТ.ДобавитьСтроку("-1");
			
			СписокРодителей.Добавить(ТекущийРодитель);
			ТекущийРодитель = ТекущийРодитель.Родитель;
		КонецЦикла;
	КонецЦикла;

	ТТ.ДобавитьСтроку("===");
	ТТ.Записать(КаталогВременныхФайлов() + "t.txt", КодировкаТекста.ANSI);
КонецПроцедуры

Процедура ВыгрузитьЦены(СписокКатегорийЦен)
	
	Рубль = Константы.ВалютаРегламентированногоУчета.Получить();
	ТЦ = Новый ТекстовыйДокумент;
	
	Для Каждого ТипЦен Из СписокКатегорийЦен Цикл
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", ТекущаяДата);
		Запрос.УстановитьПараметр("Номенклатура", СписокТоваров);

		Если ТипЦен.Рассчитывается Тогда // надо достать цену базового типа и рассчитать по наценке
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен.БазовыйТипЦен);
			Запрос.УстановитьПараметр("ТипЦенРасчетный", ТипЦен);
			Запрос.УстановитьПараметр("СпособРасчета", ТипЦен.СпособРасчетаЦены);
			Запрос.УстановитьПараметр("ПроцентНаценки", ТипЦен.ПроцентСкидкиНаценки);
		Иначе
			Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
		КонецЕсли;

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура Как Товар,
		|	ЦеныНоменклатурыСрезПоследних.Цена  КАК Цена,
		|	сЕдиницыИзмерения.Ссылка Как БазоваяЕдиница,
		|	ВЫБОР	КОГДА сНоменклатура.Услуга И ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
		|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ЕдиницаИзмерения
		|	КОНЕЦ                               КАК ЕдиницаИзмерения,
		|";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ЕСТЬNULL(ВложенныйЗапрос.ПроцентСкидкиНаценки, &ПроцентНаценки) КАК ПроцентСкидкиНаценки,
			|	ЕСТЬNULL(ВложенныйЗапрос.СпособРасчетаЦены, &СпособРасчета) КАК СпособРасчетаЦены,
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|	ЦеныНоменклатурыСрезПоследних.Валюта
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В(&Номенклатура)
		|	   И ТипЦен = &ТипЦен 
		|	   ) КАК ЦеныНоменклатурыСрезПоследних
		|";
		Если ТипЦен.Рассчитывается Тогда
			Запрос.Текст = Запрос.Текст + "
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	(ВЫБРАТЬ
			|		ЦеныНоменклатурыСрезПоследних.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
			|		ЦеныНоменклатурыСрезПоследних.СпособРасчетаЦены КАК СпособРасчетаЦены,
			|		ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
			|		ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры
			|	ИЗ
			|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&Номенклатура)
			|		   И ТипЦен = &ТипЦенРасчетный
			|		   ) КАК ЦеныНоменклатурыСрезПоследних
			|	) КАК ВложенныйЗапрос
			|ПО
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура = ВложенныйЗапрос.Номенклатура И ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры = ВложенныйЗапрос.ХарактеристикаНоменклатуры
			|";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.Номенклатура КАК сНоменклатура
		|ПО
		|	сНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	Справочник.ЕдиницыИзмерения КАК сЕдиницыИзмерения
		|ПО
		|	сЕдиницыИзмерения.Владелец = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	сНоменклатура.Ссылка В (&Номенклатура) И сЕдиницыИзмерения.ЕдиницаПоКлассификатору = сЕдиницыИзмерения.Владелец.БазоваяЕдиницаИзмерения
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура ВОЗР,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаНоменклатуры УБЫВ
		|";

		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекТовар = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Товар = ТекТовар Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТовар = Выборка.Товар;
			
			Если ТипЦен.Рассчитывается Тогда
				ВалютаТекущая = ТипЦен.ВалютаЦены;

				ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Выборка.Цена, Выборка.Валюта, ВалютаТекущая, 0, 0, ТекущаяДата);

				Если Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоВхождениюБазовойЦеныВДиапазон Тогда
					ПолученнаяЦена = Ценообразование.ПолучитьЦенуПоЦеновымДиапазонам(ТипЦен, ТекущаяДата, ПолученнаяЦена, ВалютаТекущая, ВалютаТекущая);
				ИначеЕсли Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоПроцентнойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ПолученнаяЦена * (1 + Выборка.ПроцентСкидкиНаценки / 100);
				//РТ начало	
				ИначеЕсли Выборка.СпособРасчетаЦены = Перечисления.СпособыРасчетаЦены.ПоСуммовойНаценкеНаБазовыйТип Тогда
					ПолученнаяЦена = ПолученнаяЦена + (Выборка.ПроцентСкидкиНаценки);
				//РТ конец	
				КонецЕсли;
			Иначе
				ВалютаТекущая = Выборка.Валюта;

				ПолученнаяЦена = Выборка.Цена;
			КонецЕсли;

			ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(ПолученнаяЦена, Выборка.ЕдиницаИзмерения, Выборка.БазоваяЕдиница);
			ПолученнаяЦена = Ценообразование.ОкруглитьЦену(ПолученнаяЦена, ТипЦен.ПорядокОкругления, ТипЦен.ОкруглятьВБольшуюСторону);
			ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, ВалютаТекущая, Рубль, 1, 1, ТекущаяДата);
			
			ТЦ.ДобавитьСтроку(Выборка.Товар.УникальныйИдентификатор());
			ТЦ.ДобавитьСтроку(ТипЦен.УникальныйИдентификатор());
			ТЦ.ДобавитьСтроку(Формат(ПолученнаяЦена, "ЧН=; ЧГ=0"));
		КонецЦикла;
	КонецЦикла;
	
	ТЦ.ДобавитьСтроку("===");
	ТЦ.Записать(КаталогВременныхФайлов() + "c.txt", КодировкаТекста.ANSI);
КонецПроцедуры

Процедура ВыгрузитьДопСоглашения(СписокДоговоров)
	Рубль = Константы.ВалютаРегламентированногоУчета.Получить();
	ТД = Новый ТекстовыйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата);
	Запрос.УстановитьПараметр("Договор", СписокДоговоров);
	Запрос.УстановитьПараметр("Номенклатура", СписокТоваров);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	УсловияПоставок.Номенклатура КАК Товар,
	|	УсловияПоставок.Цена КАК Цена,
	|	сЕдиницыИзмерения.Ссылка КАК БазоваяЕдиница,
	|	ВЫБОР
	|		КОГДА сНоменклатура.Услуга
	|				И УсловияПоставок.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА сНоменклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ УсловияПоставок.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	УсловияПоставок.ВалютаЦены КАК ВалютаЦены,
	|	УсловияПоставок.ДоговорКонтрагента.Владелец.Ссылка КАК Контрагент
	|ИЗ
	|	РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(
	|			&Дата,
	|			ДоговорКонтрагента В (&Договор)
	|				И Номенклатура В (&Номенклатура)) КАК УсловияПоставок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК сНоменклатура
	|		ПО (сНоменклатура.Ссылка = УсловияПоставок.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК сЕдиницыИзмерения
	|		ПО (сЕдиницыИзмерения.Владелец = УсловияПоставок.Номенклатура)
	|ГДЕ
	|	УсловияПоставок.Цена <> 0
	|	И сНоменклатура.Ссылка В(&Номенклатура)
	|	И сЕдиницыИзмерения.ЕдиницаПоКлассификатору = сЕдиницыИзмерения.Владелец.БазоваяЕдиницаИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	УсловияПоставок.Номенклатура,
	|	УсловияПоставок.ХарактеристикаНоменклатуры УБЫВ";
	
	Запрос.Текст = ТекстЗапроса;
	ТекТовар = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Товар = ТекТовар Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТовар = Выборка.Товар;
		
		ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииЕдиницы(Выборка.Цена, Выборка.ЕдиницаИзмерения, Выборка.БазоваяЕдиница);
		ПолученнаяЦена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ПолученнаяЦена, Выборка.ВалютаЦены, Рубль, 1, 1, ТекущаяДата);
		
		ТД.ДобавитьСтроку(Выборка.Товар.УникальныйИдентификатор());
		ТД.ДобавитьСтроку(Выборка.Контрагент.УникальныйИдентификатор());
		ТД.ДобавитьСтроку(Формат(ПолученнаяЦена, "ЧН=; ЧГ=0"));
	КонецЦикла;
	
	ТД.ДобавитьСтроку("===");
	ТД.Записать(КаталогВременныхФайлов() + "dc.txt", КодировкаТекста.ANSI);
	
КонецПроцедуры

Процедура ВыгрузитьОтчетПоДолгам(СписокКонтрагентов)
	ТО = Новый ТекстовыйДокумент;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", СписокКонтрагентов);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаК", КонецДня(ТекущаяДата));
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентами.Контрагент КАК Контрагент,
	|	ВзаиморасчетыСКонтрагентами.Регистратор КАК Реализация,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата КАК ДатаОтгрузки,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.СуммаДокумента КАК СуммаДокумента,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.ДоговорКонтрагента.ДопустимоеЧислоДнейЗадолженностиДоп КАК ДопустимоеЧислоДнейЗадолженности
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами КАК ВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентами.ВидДвижения = &ВидДвижения
	|	И ВзаиморасчетыСКонтрагентами.Контрагент В(&Контрагент)
	|	И ВзаиморасчетыСКонтрагентами.Период <= &ДатаК
	|	И ВЫРАЗИТЬ(ВзаиморасчетыСКонтрагентами.Регистратор КАК Документ.РеализацияТоваровУслуг) ЕСТЬ НЕ NULL 
	|	И ВзаиморасчетыСКонтрагентами.ДоговорКонтрагента В
	|			(ВЫБРАТЬ
	|				ВзаиморасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
	|			ИЗ
	|				РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(&ДатаК, ) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|			ГДЕ
	|				ВзаиморасчетыСКонтрагентамиОстатки.Контрагент В (&Контрагент)
	|				И ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыСКонтрагентами.Контрагент.Наименование,
	|	ВзаиморасчетыСКонтрагентами.Регистратор.Дата УБЫВ
	|ИТОГИ
	|	СУММА(СуммаДокумента)
	|ПО
	|	Контрагент,
	|	Реализация";
	
	Результат2 = Запрос.Выполнить();
				   
	ЗапросОстатка = Новый Запрос;
	ЗапросОстатка.УстановитьПараметр("ДатаК", КонецДня(ТекущаяДата));
	ЗапросОстатка.Текст = "ВЫБРАТЬ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.Остатки(
	|			&ДатаК,
	|			Контрагент = &Контрагент) КАК ВзаиморасчетыСКонтрагентамиОстатки
	|ГДЕ
	|	ВзаиморасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0";
	
	
	Выборка = Результат2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Контрагент");
	Пока Выборка.Следующий() Цикл
		ЗапросОстатка.УстановитьПараметр("Контрагент", Выборка.Контрагент);
		
		тзОстаток = ЗапросОстатка.Выполнить().Выгрузить();
		Если тзОстаток.Количество() = 0 Тогда
			Продолжить;
		Иначе
			ДолгКонтрагента = тзОстаток[0].СуммаВзаиморасчетовОстаток;
			
			Если ДолгКонтрагента <= 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ВыборкаДетали = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Реализация");
		Пока ВыборкаДетали.Следующий() Цикл
			
			//Контрагент Реализация		ДатаОтгрузки	СуммаДокумента	СрокОплаты	Долг	ПросроченныйПлатеж	Задержка			
			ТО.ДобавитьСтроку(Выборка.Контрагент.УникальныйИдентификатор());
			ТО.ДобавитьСтроку(Строка(ВыборкаДетали.Реализация.Ссылка));
			ТО.ДобавитьСтроку(Формат(ВыборкаДетали.ДатаОтгрузки, "ДФ=dd.MM.yy"));
			ТО.ДобавитьСтроку(Формат(ВыборкаДетали.СуммаДокумента, "ЧН=; ЧГ=0")); 
			Если ВыборкаДетали.ДопустимоеЧислоДнейЗадолженности > 0 Тогда
				СрокОплаты = ЗаполнениеДокументов.ОпределитьДату(ВыборкаДетали.ДатаОтгрузки, ВыборкаДетали.ДопустимоеЧислоДнейЗадолженности) - 86400;
			Иначе
				СрокОплаты = ВыборкаДетали.ДатаОтгрузки;
			КонецЕсли;
			ТО.ДобавитьСтроку(Формат(СрокОплаты, "ДФ=dd.MM.yy"));
			
			ТекДолг = Мин(ВыборкаДетали.СуммаДокумента, ДолгКонтрагента);
			ДолгКонтрагента = ДолгКонтрагента - ТекДолг;
			
			ТО.ДобавитьСтроку(Формат(ТекДолг, "ЧН=; ЧГ=0"));
			
			Если НачалоДня(СрокОплаты) < НачалоДня(ТекущаяДата) Тогда
				ТО.ДобавитьСтроку(Формат(ТекДолг, "ЧН=; ЧГ=0"));
				ТО.ДобавитьСтроку(Формат(Цел((НачалоДня(ТекущаяДата) - НачалоДня(СрокОплаты)) / 3600 / 24 ), "ЧН=; ЧГ=0"));
			Иначе
				ТО.ДобавитьСтроку(Формат(0, "ЧН=; ЧГ=0"));
				ТО.ДобавитьСтроку(Формат(0, "ЧН=; ЧГ=0"));
			КонецЕсли;
			
			Если ДолгКонтрагента = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТО.ДобавитьСтроку("===");
	ТО.Записать(КаталогВременныхФайлов() + "r.txt", КодировкаТекста.ANSI);
КонецПроцедуры

Процедура ВыгрузитьОтчетПоВзаиморасчетам(СписокКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент,
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент.ОсновнойМенеджерПокупателя КАК Менеджер,
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Организация,
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовНачальныйОстаток,
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовПриход,
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовРасход,
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.СуммаВзаиморасчетовКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСКонтрагентами.ОстаткиИОбороты(&НачДата, &КонДата, Период, ДвиженияИГраницыПериода, ) КАК ВзаиморасчетыСКонтрагентамиОстаткиИОбороты
		|ГДЕ
		|	ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Контрагент В(&СписокКонтрагентов)";

	Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("НачДата", НачалоПериодаВзаиморасчеты);
	
	ФильтрОрганизации = Организации.ВыгрузитьКолонку("Организация");
	Если ФильтрОрганизации.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И ВзаиморасчетыСКонтрагентамиОстаткиИОбороты.Организация В(&Организация)";
		Запрос.УстановитьПараметр("Организация", ФильтрОрганизации);
	КонецЕсли;

	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);

	ТО = Новый ТекстовыйДокумент;
	
	ТО.ДобавитьСтроку(Справочники.Контрагенты.ПустаяСсылка().УникальныйИдентификатор());
	ТО.ДобавитьСтроку("За период с " + Формат(НачалоПериодаВзаиморасчеты, "ДФ=dd.MM.yy") + " по " + Формат(ТекущаяДата,  "ДФ=dd.MM.yy"));
	ТО.ДобавитьСтроку("");
	ТО.ДобавитьСтроку(0);
	ТО.ДобавитьСтроку(0);
	ТО.ДобавитьСтроку(0);
	ТО.ДобавитьСтроку(0);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Контрагент.УникальныйИдентификатор());
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Организация);
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Менеджер);
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.СуммаВзаиморасчетовНачальныйОстаток, "ЧН=; ЧГ=0"));
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.СуммаВзаиморасчетовПриход, "ЧН=; ЧГ=0"));
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.СуммаВзаиморасчетовРасход, "ЧН=; ЧГ=0"));
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.СуммаВзаиморасчетовКонечныйОстаток, "ЧН=; ЧГ=0"));
	КонецЦикла;

	ТО.ДобавитьСтроку("===");
	ТО.Записать(КаталогВременныхФайлов() + "r2.txt", КодировкаТекста.ANSI);
КонецПроцедуры

Процедура ВыгрузитьОтчетАнализПродаж(СписокКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПродажиОбороты.Контрагент,
	|	ПродажиОбороты.Номенклатура,
	|	ПродажиОбороты.КоличествоОборот КАК Количество,
	|	ПродажиОбороты.СтоимостьОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.Продажи.Обороты(&НачДата, &КонДата, Период, ) КАК ПродажиОбороты
	|ГДЕ
	|	ПродажиОбороты.Контрагент В(&СписокКонтрагентов)
	|	И ПродажиОбороты.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)";

	Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата));
	
	ФильтрОрганизации = Организации.ВыгрузитьКолонку("Организация");
	Если ФильтрОрганизации.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И ПродажиОбороты.Организация В(&Организация)";
		Запрос.УстановитьПараметр("Организация", ФильтрОрганизации);
	КонецЕсли;

	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);

	ТО = Новый ТекстовыйДокумент;
	
	ТО.ДобавитьСтроку(Справочники.Контрагенты.ПустаяСсылка().УникальныйИдентификатор());
	ТО.ДобавитьСтроку("За " + Формат(ТекущаяДата,  "ДФ=dd.MM.yy"));
	ТО.ДобавитьСтроку(0);
	ТО.ДобавитьСтроку(0);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Контрагент.УникальныйИдентификатор());
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор());
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.Количество, "ЧН=; ЧГ=0"));
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.Сумма, "ЧН=; ЧГ=0"));
	КонецЦикла;

	ТО.ДобавитьСтроку("===");
	ТО.Записать(КаталогВременныхФайлов() + "r3.txt", КодировкаТекста.ANSI);
КонецПроцедуры

Процедура ВыгрузитьМаршрутныеЛисты(СписокКонтрагентов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныйЛистНакладные.Контрагент,
	|	МаршрутныйЛистНакладные.НомерСтроки,
	|	МаршрутныйЛистНакладные.Дата,
	|	МаршрутныйЛистНакладные.Накладная.Номер,
	|	МаршрутныйЛистНакладные.Организация,
	|	МаршрутныйЛистНакладные.АдресДоставки,
	|	МаршрутныйЛистНакладные.Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛист.Накладные КАК МаршрутныйЛистНакладные
	|ГДЕ
	|	МаршрутныйЛистНакладные.Контрагент В(&СписокКонтрагентов)
	|	И МаршрутныйЛистНакладные.Ссылка.Дата МЕЖДУ &НачДата И &КонДата";

	Запрос.УстановитьПараметр("КонДата", КонецДня(ТекущаяДата));
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);

	ТО = Новый ТекстовыйДокумент;
	
	ТекВодитель = "";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Ссылка.ФизЛицо <> ТекВодитель Тогда
			ТекВодитель = ВыборкаДетальныеЗаписи.Ссылка.ФизЛицо;
			Запрос2 = Новый Запрос;
			Запрос2.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект
			|	И КонтактнаяИнформация.Вид = &Вид";
			
			Запрос2.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный);
			Запрос2.УстановитьПараметр("Объект", ТекВодитель);
			
			ВыборкаДетальныеЗаписи2 = Запрос2.Выполнить().Выбрать();
			Если ВыборкаДетальныеЗаписи2.Следующий() Тогда
				ТекТелефон = СокрЛП(ВыборкаДетальныеЗаписи2.Представление);
			Иначе
				ТекТелефон = "";
			КонецЕсли;
		КонецЕсли;
		
		ТО.ДобавитьСтроку("Маршрутный лист №" + СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Номер) + " от " + Формат(ВыборкаДетальныеЗаписи.Ссылка.Дата, "ДФ=dd.MM.yyyy"));
		ТО.ДобавитьСтроку("Водитель " + СокрЛП(ТекВодитель) + " тел. " + СокрЛП(ТекТелефон));
		ТО.ДобавитьСтроку("Автомобиль " + СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Авто) + " гос.номер " + СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Авто.Номер));
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.НомерСтроки);
		ТО.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.Дата, "ДФ=dd.MM.yyyy"));
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.НакладнаяНомер);
		ТО.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Контрагент.УникальныйИдентификатор());
		ТО.ДобавитьСтроку(СокрЛП(ВыборкаДетальныеЗаписи.Организация));
		ТО.ДобавитьСтроку(СокрЛП(ВыборкаДетальныеЗаписи.АдресДоставки));
	КонецЦикла;

	ТО.ДобавитьСтроку("===");
	ТО.Записать(КаталогВременныхФайлов() + "rml.txt", КодировкаТекста.ANSI);
	
КонецПроцедуры

Процедура ВыгрузитьКонтрагентовИЦены(ТорговыйПредставитель, ВсеКонтрагенты)
	
	СписокКатегорийЦен = Новый Массив;
	СписокКонтрагентов = Новый Массив;
	СписокДоговоров = Новый Массив;
	
	ФильтрКонтрагентов = Контрагенты.ВыгрузитьКолонку("Контрагент");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК КонтрагентСсылка,
	|	Контрагенты.Наименование КАК Контрагент,
	|	Контрагенты.ОсновнойДоговорКонтрагента.Ссылка КАК ОсновнойДоговор,
	|	ВЫБОР
	|		КОГДА Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен = НЕОПРЕДЕЛЕНО
	|				ИЛИ ТИПЗНАЧЕНИЯ(Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен) <> ТИП(Справочник.ТипыЦенНоменклатуры)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(Контрагенты.ОсновнойДоговорКонтрагента.ТипЦен, ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ КАК ТипЦен
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
		
	Если ВсеКонтрагенты Тогда
		Если ФильтрКонтрагентов.Количество() > 0 Тогда
			Запрос.Текст = Запрос.Текст + " И Контрагенты.Ссылка В ИЕРАРХИИ (&ФильтрКонтрагентов)";
			Запрос.УстановитьПараметр("ФильтрКонтрагентов", ФильтрКонтрагентов);
		КонецЕсли;
	Иначе
		Запрос.Текст = Запрос.Текст + " И Контрагенты.ОсновнойМенеджерПокупателя = &ОсновнойМенеджерПокупателя";
		Запрос.УстановитьПараметр("ОсновнойМенеджерПокупателя", ТорговыйПредставитель);
	КонецЕсли;

	Результат = Запрос.Выполнить();
	
	ТК = Новый ТекстовыйДокумент;

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТК.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Контрагент);
		ТК.ДобавитьСтроку(ВыборкаДетальныеЗаписи.КонтрагентСсылка.УникальныйИдентификатор());
		ТК.ДобавитьСтроку(ВыборкаДетальныеЗаписи.ТипЦен.УникальныйИдентификатор());
		
		Если СписокКатегорийЦен.Найти(ВыборкаДетальныеЗаписи.ТипЦен) = Неопределено Тогда
			Если Не ВыборкаДетальныеЗаписи.ТипЦен.Пустая() Тогда
				СписокКатегорийЦен.Добавить(ВыборкаДетальныеЗаписи.ТипЦен);
			КонецЕсли;
		КонецЕсли;
		
		СписокКонтрагентов.Добавить(ВыборкаДетальныеЗаписи.КонтрагентСсылка);
		СписокДоговоров.Добавить(ВыборкаДетальныеЗаписи.ОсновнойДоговор);
	КонецЦикла;
	
	ТК.ДобавитьСтроку("===");
	ТК.Записать(КаталогВременныхФайлов() + "k.txt", КодировкаТекста.ANSI);
	
	// адреса
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Объект.Ссылка КАК КонтрагентСсылка,
		|	КонтактнаяИнформация.Вид.Ссылка,
		|	КонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|	И КонтактнаяИнформация.Объект В(&СписокКонтрагентов)
		|	И НЕ КонтактнаяИнформация.Вид.Ссылка ЕСТЬ NULL ";

	Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);

	Результат = Запрос.Выполнить();
    ТА = Новый ТекстовыйДокумент;
	
	ТекКонтрагент = "-1";
	ТекКонтрагентАдреса = Новый Массив;
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КонтрагентСсылка <> ТекКонтрагент Тогда
			ТекКонтрагент = ВыборкаДетальныеЗаписи.КонтрагентСсылка;
			ТекКонтрагентАдреса.Очистить();
		КонецЕсли;
		
		Если ТекКонтрагентАдреса.Найти(СокрЛП(ВыборкаДетальныеЗаписи.Адрес)) = Неопределено Тогда 
			ТА.ДобавитьСтроку(ВыборкаДетальныеЗаписи.КонтрагентСсылка.УникальныйИдентификатор());
			ТА.ДобавитьСтроку(ВыборкаДетальныеЗаписи.ВидСсылка.УникальныйИдентификатор());
			ТА.ДобавитьСтроку(ВыборкаДетальныеЗаписи.Адрес);
			
			ТекКонтрагентАдреса.Добавить(СокрЛП(ВыборкаДетальныеЗаписи.Адрес));
		КонецЕсли;
	КонецЦикла;
	
	ТА.ДобавитьСтроку("===");
	ТА.Записать(КаталогВременныхФайлов() + "a.txt", КодировкаТекста.ANSI);
	
	// цены
	ВыгрузитьЦены(СписокКатегорийЦен);
	
    // доп.соглашения
	ВыгрузитьДопСоглашения(СписокДоговоров);
	
	// долги
	ВыгрузитьОтчетПоДолгам(СписокКонтрагентов);
	ВыгрузитьОтчетПоВзаиморасчетам(СписокКонтрагентов);
	ВыгрузитьОтчетАнализПродаж(СписокКонтрагентов);
	
	// маршрутные листы
	ВыгрузитьМаршрутныеЛисты(СписокКонтрагентов);
КонецПроцедуры

Процедура ВыгрузитьЗапросыЦен(ТорговыйПредставитель)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИТС_ПриказыНаЦены.Номенклатура,
		|	ИТС_ПриказыНаЦены.ТорговыйПредставитель,
		|	ИТС_ПриказыНаЦены.УникальныйИдентификатор,
		|	ИТС_ПриказыНаЦены.Статус,
		|	ИТС_ПриказыНаЦены.Цена,
		|	ИТС_ПриказыНаЦены.ДатаНачала,
		|	ИТС_ПриказыНаЦены.ДатаОкончания
		|ИЗ
		|	РегистрСведений.ИТС_ПриказыНаЦены КАК ИТС_ПриказыНаЦены
		|ГДЕ
		|	ИТС_ПриказыНаЦены.ТорговыйПредставитель = &ТорговыйПредставитель
		|	И ИТС_ПриказыНаЦены.ОтправленоАгенту = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ТорговыйПредставитель", ТорговыйПредставитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    ТЦ = Новый ТекстовыйДокумент;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТЦ.ДобавитьСтроку(ВыборкаДетальныеЗаписи.УникальныйИдентификатор);
		ТЦ.ДобавитьСтроку(СокрЛП(ВыборкаДетальныеЗаписи.Номенклатура.УникальныйИдентификатор()));
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен Тогда
			ТЦ.ДобавитьСтроку(0);
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден Тогда
			ТЦ.ДобавитьСтроку(1);
		//ИначеЕсли (ВыборкаДетальныеЗаписи.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден) Тогда
		//	ТЦ.ДобавитьСтроку(2);
		ИначеЕсли (ВыборкаДетальныеЗаписи.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены) Тогда
			ТЦ.ДобавитьСтроку(2);
		КонецЕсли;
		
		ТЦ.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.ДатаНачала, "ДФ=yyyy-MM-dd"));
		ТЦ.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.ДатаОкончания, "ДФ=yyyy-MM-dd"));
		ТЦ.ДобавитьСтроку(Формат(ВыборкаДетальныеЗаписи.Цена, "ЧН=; ЧГ=0"));
		
		Запись = РегистрыСведений.ИТС_ПриказыНаЦены.СоздатьМенеджерЗаписи();
		Запись.УникальныйИдентификатор = ВыборкаДетальныеЗаписи.УникальныйИдентификатор;
		Запись.Номенклатура = ВыборкаДетальныеЗаписи.Номенклатура;
		Запись.ТорговыйПредставитель = ВыборкаДетальныеЗаписи.ТорговыйПредставитель;
		Запись.Прочитать();
		Запись.ОтправленоАгенту = Истина;
		Запись.Записать(Истина);
	КонецЦикла;
	
	ТЦ.ДобавитьСтроку("===");
	//ТЦ.Записать(КаталогВременныхФайлов() + "pd.txt", КодировкаТекста.ANSI);
	ТЦ.Записать(КаталогВременныхФайлов() + "pdver2.txt", КодировкаТекста.ANSI);

КонецПроцедуры

Процедура ОсновныеДействияФормыКнопкаВыгрузить(Кнопка)
	
	Почта = ПодключитьсяКПочтовомуЯщику();
	Если Почта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТоварыВыгружали = Ложь;
	
	Для Каждого Стр Из ТорговыеПредставители Цикл
		
		Если Не Стр.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		Состояние("Выгружаем: " + Строка(Стр.ТорговыйПредставитель));
		
		Если Не ТоварыВыгружали Тогда
			ВыгрузитьТовары();
			ТоварыВыгружали = Истина;
		КонецЕсли;
		
		ВыгрузитьКонтрагентовИЦены(Стр.ТорговыйПредставитель, Стр.ВсеКонтрагенты);
		
		ВыгрузитьЗапросыЦен(Стр.ТорговыйПредставитель);
		
		// отправляем письмо
		
		ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
		
		ЗаписьЗип = Новый ЗаписьZipФайла(ИмяАрхива);
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "t.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "k.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "a.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "c.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "dc.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "r.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "r2.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "r3.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "rml.txt");
		//ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "pd.txt");
		ЗаписьЗип.Добавить(КаталогВременныхФайлов() + "pdver2.txt");
		ЗаписьЗип.Записать();
		
		Письмо = Новый ИнтернетПочтовоеСообщение;
		Письмо.Кодировка = "windows-1251";
		Письмо.Отправитель = ПочтаЯщик;
		Письмо.Получатели.Добавить(Стр.EMail);
		Письмо.Тема = "Данные из офиса " + Строка(ТекущаяДата);
		Письмо.Тексты.Добавить("Данные из офиса");
		Письмо.Вложения.Добавить(ИмяАрхива);
		
		Почта.Послать(Письмо);
		Сообщить("Отправлено письмо с файлом обмена для " + Строка(Стр.ТорговыйПредставитель));
		
		УдалитьФайлы(КаталогВременныхФайлов(), ИмяАрхива);
	КонецЦикла;
	
	Почта.Отключиться();
КонецПроцедуры

Функция ПолучитьАдрес(КонтрагентСсылка, ВидАдресаСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Адрес
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект
		|	И КонтактнаяИнформация.Вид = &Вид";

	Запрос.УстановитьПараметр("Вид", ВидАдресаСсылка);
	Запрос.УстановитьПараметр("Объект", КонтрагентСсылка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Адрес;
	КонецЦикла;

	Возврат "";
КонецФункции

Функция ПолучитьЕдиницу(Товар)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаСсылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец
	|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &ЕдиницаПоКлассификатору";
	
	Запрос.УстановитьПараметр("Владелец", Товар);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификатору", Товар.БазоваяЕдиницаИзмерения);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ЕдиницаСсылка;
	КонецЦикла;
	
	Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
КонецФункции

Процедура СоздатьЗаявки(ФайлЗаявок)
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлЗаявок, "windows-1251");
	
	ТС = Новый ТаблицаЗначений;
	ТС.Колонки.Добавить("Номер");
	ТС.Колонки.Добавить("Дата");
	ТС.Колонки.Добавить("Контрагент");
	ТС.Колонки.Добавить("Адрес");
	ТС.Колонки.Добавить("Товар");
	ТС.Колонки.Добавить("Количество");
	ТС.Колонки.Добавить("Цена");
	
	Для сч = 1 По ТД.КоличествоСтрок() Цикл
		Если (сч - 1) % 7 = 0 Тогда
			ТекСтрока = ТС.Добавить();
			ТекСтрока.Номер = ТД.ПолучитьСтроку(сч);
		ИначеЕсли (сч - 1) % 7 = 1 Тогда
			ТекСтрока.Дата = Дата(СтрЗаменить(ТД.ПолучитьСтроку(сч), "-", ""));
		ИначеЕсли (сч - 1) % 7 = 2 Тогда
			ТекСтрока.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ТД.ПолучитьСтроку(сч)));
		ИначеЕсли (сч - 1) % 7 = 3 Тогда
			ТекСтрока.Адрес = ПолучитьАдрес(ТекСтрока.Контрагент, Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(ТД.ПолучитьСтроку(сч))));
		ИначеЕсли (сч - 1) % 7 = 4 Тогда
			ТекСтрока.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ТД.ПолучитьСтроку(сч)));
		ИначеЕсли (сч - 1) % 7 = 5 Тогда
			ТекСтрока.Количество = Число(ТД.ПолучитьСтроку(сч));
		ИначеЕсли (сч - 1) % 7 = 6 Тогда
			ТекСтрока.Цена = Число(ТД.ПолучитьСтроку(сч));
		КонецЕсли;
	КонецЦикла;
	
	ТекНомер = "хххх";
	ТекДок = Документы.ИТС_ЗаказПокупателя.СоздатьДокумент();
	Для Каждого СТД Из ТС Цикл
		Если СТД.Номер <> ТекНомер Тогда
			Если ТекДок.Товары.Количество() > 0 Тогда
				ТекДок.Записать(РежимЗаписиДокумента.Запись);
				Сообщить("Создан документ: " + Строка(ТекДок.Ссылка));
			КонецЕсли;
			
			ТекДок = Документы.ИТС_ЗаказПокупателя.СоздатьДокумент();
			ТекДок.Дата = ТекущаяДата;
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ТекДок, глЗначениеПеременной("глТекущийПользователь"), глЗначениеПеременной("ВалютаРегламентированногоУчета"), "Продажа");
		
			ТекДок.Контрагент = СТД.Контрагент;
			ТекДок.ПриИзмененииКонтрагента();
			
			//	ТекДок.ПриИзмененииДоговора();
			СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
			СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ТекДок);
			ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ТекДок, ТекДок.ДоговорКонтрагента.ВалютаВзаиморасчетов, глЗначениеПеременной("ВалютаРегламентированногоУчета"), СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", ТекДок.ДоговорКонтрагента);
			ТекДок.ПересчитатьАвтоматическиеСкидки();
			УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ТекДок,"",ТекДок.ДоговорКонтрагента);
			ТекДок.РассчитатьСумму();
			
			ТекДок.ДатаОтгрузки = СТД.Дата;
			ТекДок.АдресДоставки = СТД.Адрес;
			
			ТекДок.Комментарий = "Загружен";
			УправлениеЗаказами.УстановитьДатуОплатыПоДоговору(ТекДок);

			ТекНомер = СТД.Номер;
		КонецЕсли;
		
        НоваяСтрока = ТекДок.Товары.Добавить();
		НоваяСтрока.Номенклатура = СТД.Товар;
		НоваяСтрока.ЕдиницаИзмерения = ПолучитьЕдиницу(СТД.Товар);
		НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		НоваяСтрока.Количество = СТД.Количество;
		
		ТекДок.ПриИзмененииНоменклатурыТоваров(НоваяСтрока);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ТекДок);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ТекДок);
	КонецЦикла;
	
	Если ТекДок.Товары.Количество() > 0 Тогда
		ТекДок.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Создан документ: " + Строка(ТекДок.Ссылка));
	КонецЕсли;
			
КонецПроцедуры

Процедура СоздатьЗапросыЦен(ФайлЗапросовЦен, ТорговыйПредставитель)
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлЗапросовЦен, "windows-1251");
	
	ТС = Новый ТаблицаЗначений;
	ТС.Колонки.Добавить("Номер");
	ТС.Колонки.Добавить("Дата");
	ТС.Колонки.Добавить("Контрагент");
	ТС.Колонки.Добавить("УникальныйИдентификатор");
	ТС.Колонки.Добавить("ДатаНачала");
	ТС.Колонки.Добавить("ДатаОкончания");
	ТС.Колонки.Добавить("Товар");
	ТС.Колонки.Добавить("Цена");
	ТС.Колонки.Добавить("НоваяЦена");
	
	Для сч = 1 По ТД.КоличествоСтрок() Цикл
		Если (сч - 1) % 9 = 0 Тогда
			ТекСтрока = ТС.Добавить();
			ТекСтрока.Номер = ТД.ПолучитьСтроку(сч);
		ИначеЕсли (сч - 1) % 9 = 1 Тогда
			ТекСтрока.Дата = Дата(СтрЗаменить(ТД.ПолучитьСтроку(сч), "-", ""));
		ИначеЕсли (сч - 1) % 9 = 2 Тогда
			ТекСтрока.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(ТД.ПолучитьСтроку(сч)));
		ИначеЕсли (сч - 1) % 9 = 3 Тогда
			ТекСтрока.УникальныйИдентификатор = СокрЛП(ТД.ПолучитьСтроку(сч));
		ИначеЕсли (сч - 1) % 9 = 4 Тогда                                            
			ТекСтрока.ДатаНачала = ?(ПустаяСтрока(ТД.ПолучитьСтроку(сч)), '00010101', Дата(СтрЗаменить(ТД.ПолучитьСтроку(сч), "-", "")));
		ИначеЕсли (сч - 1) % 9 = 5 Тогда                                            
			ТекСтрока.ДатаОкончания = ?(ПустаяСтрока(ТД.ПолучитьСтроку(сч)), '00010101', Дата(СтрЗаменить(ТД.ПолучитьСтроку(сч), "-", "")));
		ИначеЕсли (сч - 1) % 9 = 6 Тогда
			ТекСтрока.Товар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ТД.ПолучитьСтроку(сч)));
		ИначеЕсли (сч - 1) % 9 = 7 Тогда
			ТекСтрока.Цена = Число(ТД.ПолучитьСтроку(сч));
		ИначеЕсли (сч - 1) % 9 = 8 Тогда
			ТекСтрока.НоваяЦена = Число(ТД.ПолучитьСтроку(сч));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрТс Из ТС Цикл
		
		//++ ИТС ДАФ 2017-05-18
		//Запись = РегистрыСведений.ИТС_ПриказыНаЦены.СоздатьМенеджерЗаписи();
		//Запись.Дата = СтрТс.Дата;
		//Запись.ДатаНачала = СтрТс.ДатаНачала;
		//Запись.ДатаОкончания = СтрТс.ДатаОкончания;
		//Запись.Контрагент = СтрТс.Контрагент;
		//Запись.Номенклатура = СтрТс.Товар;
		//Запись.ТорговыйПредставитель = ТорговыйПредставитель;
		//Запись.УникальныйИдентификатор = СтрТс.УникальныйИдентификатор;
		//Запись.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен;
		//Запись.ОтправленоАгенту = Истина;
		//Запись.Цена = СтрТс.НоваяЦена;
		//Запись.Записать(Истина);
		
		НаборЗаписей = РегистрыСведений.ИТС_ПриказыНаЦены.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(СтрТс.УникальныйИдентификатор);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрТс.Товар);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			Запись = НаборЗаписей.Добавить();
			Запись.Дата = СтрТс.Дата;
			Запись.ДатаНачала = СтрТс.ДатаНачала;
			Запись.ДатаОкончания = СтрТс.ДатаОкончания;
			Запись.Контрагент = СтрТс.Контрагент;
			Запись.Номенклатура = СтрТс.Товар;
			Запись.ТорговыйПредставитель = ТорговыйПредставитель;
			Запись.УникальныйИдентификатор = СтрТс.УникальныйИдентификатор;
			Запись.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен;
			Запись.ОтправленоАгенту = Истина;
			Запись.Цена = СтрТс.НоваяЦена;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		//-- ИТС ДАФ 2017-05-18
		
	КонецЦикла;
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	Почта = ПодключитьсяКПочтовомуЯщику();
	Если Почта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщения = Почта.Выбрать(Ложь);
	Для Каждого Письмо Из Сообщения Цикл
		Если СокрЛП(Письмо.Тема) <> "Выгрузка в офис" Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Вложение Из Письмо.Вложения Цикл
			Если Вложение.ИмяФайла = "d.txt" Тогда
				ФайлЗаявок = ПолучитьИмяВременногоФайла("txt");
				Вложение.Данные.Записать(ФайлЗаявок);
				СоздатьЗаявки(ФайлЗаявок);
			КонецЕсли;
			
			Если Вложение.ИмяФайла = "pd.txt" Тогда
				ФайлЗапросовЦен = ПолучитьИмяВременногоФайла("txt");
				Вложение.Данные.Записать(ФайлЗапросовЦен);
				СтрТоргПред = ТорговыеПредставители.Найти(СокрЛП(Письмо.Отправитель.Адрес), "EMail");
				СоздатьЗапросыЦен(ФайлЗапросовЦен, ?(СтрТоргПред = Неопределено, Справочники.Пользователи.ПустаяСсылка(), СтрТоргПред.ТорговыйПредставитель));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Почта.УдалитьСообщения(Сообщения);
	Почта.Отключиться();
КонецПроцедуры

Процедура ТекущаяДатаПриИзменении(Элемент)
	НачалоПериодаВзаиморасчеты = НачалоМесяца(ТекущаяДата);
КонецПроцедуры

//ПочтаЯщик = "nordoffice2012@mail.ru";
//ПочтаПользователь = "nordoffice2012@mail.ru";
//ПочтаПароль = "Gfk.nby-";
ПочтаЯщик = "samoletische@mail.ru";
ПочтаПользователь = "samoletische@mail.ru";
ПочтаПароль = "trustNO13299";
ПочтаПопСервер = "pop.mail.ru";
ПочтаСмтпСервер = "smtp.mail.ru";