
Процедура ПриОткрытии()
	
	Статусы.Очистить();
	Статусы.Добавить(Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен);
	Статусы.Добавить(Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден1);
	Статусы.Добавить(Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден2);
	Статусы.Добавить(Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден12);
	
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УтверждающийПриказы1")
		ИЛИ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УтверждающийПриказы2") Тогда
		
		ЭлементыФормы.КоманднаяПанель1.Кнопки.СформироватьЦены.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанель1.Кнопки.СформироватьЦены.Доступность = Ложь;
	КонецЕсли;
	
	СформироватьЖурнал();
	
КонецПроцедуры // ПриОткрытии

Процедура УстановитьВидимость()

	Если ЭлементыФормы.Журнал.ТекущиеДанные.Статус <> Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден 
		И ЭлементыФормы.Журнал.ТекущиеДанные.Статус <> Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены Тогда
		ЭлементыФормы.КоманднаяПанель1.Кнопки.СформироватьЦены.Доступность = Истина;
	Иначе
		ЭлементыФормы.КоманднаяПанель1.Кнопки.СформироватьЦены.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость

Процедура СформироватьЖурнал()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Закупки.Номенклатура,
	                      |	МАКСИМУМ(Закупки.Период) КАК Период
	                      |ПОМЕСТИТЬ ПоследниеЗакупки
	                      |ИЗ
	                      |	РегистрНакопления.Закупки КАК Закупки
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	Закупки.Номенклатура
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ИТС_ПриказыНаЦены.Дата,
	                      |	ИТС_ПриказыНаЦены.Статус,
	                      |	ИТС_ПриказыНаЦены.Контрагент КАК Контрагент,
	                      |	ИТС_ПриказыНаЦены.Номенклатура КАК Номенклатура,
	                      |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Цена КАК ЦенаДействующая,
	                      |	ИТС_ПриказыНаЦены.Цена КАК ЦенаПредлагаемая,
	                      |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Цена - ИТС_ПриказыНаЦены.Цена КАК РазницаМеждуНовойИДействующей,
	                      |	ЦеныНоменклатурыСрезПоследних.Цена КАК ЦенаВходящая,
	                      |	1 КАК Определитель,
	                      |	УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Период КАК Период,
	                      |	ИТС_ПриказыНаЦены.ДатаНачала,
	                      |	ИТС_ПриказыНаЦены.ДатаОкончания,
	                      |	ИТС_ПриказыНаЦены.ТорговыйПредставитель,
	                      |	0 КАК РазницаМеждуНовойИВходЗатраты,
	                      |	ИТС_ПриказыНаЦены.ЦенаДействующая КАК ЦенаДействующаяСтарая,
	                      |	ИТС_ПриказыНаЦены.ЦенаВходящая КАК ЦенаВходящаяСтарая,
	                      |	ИТС_ПриказыНаЦены.Затраты КАК ЗатратыСтарые,
	                      |	ИТС_ПриказыНаЦены.УникальныйИдентификатор,
	                      |	ЛОЖЬ КАК Утверждение1,
	                      |	ЛОЖЬ КАК Утверждение2,
	                      |	""                 "" КАК СтатусСтрока,
	                      |	Закупки.Контрагент.ИТС_Затраты КАК Затраты
	                      |ИЗ
	                      |	РегистрСведений.ИТС_ПриказыНаЦены КАК ИТС_ПриказыНаЦены
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуре.СрезПоследних(&Дата, ) КАК УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних
	                      |		ПО ИТС_ПриказыНаЦены.Контрагент.ОсновнойДоговорКонтрагента = УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.ДоговорКонтрагента
	                      |			И ИТС_ПриказыНаЦены.Номенклатура = УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ) КАК ЦеныНоменклатурыСрезПоследних
	                      |		ПО ИТС_ПриказыНаЦены.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеЗакупки КАК ПоследниеЗакупки
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	                      |			ПО ПоследниеЗакупки.Номенклатура = Закупки.Номенклатура
	                      |				И ПоследниеЗакупки.Период = Закупки.Период
	                      |		ПО ИТС_ПриказыНаЦены.Номенклатура = ПоследниеЗакупки.Номенклатура
	                      |ГДЕ
	                      |	(УсловияПоставокПоДоговорамКонтрагентовПоНоменклатуреСрезПоследних.Цена > 0
	                      |			ИЛИ ЦеныНоменклатурыСрезПоследних.Цена > 0)
	                      |	И ЦеныНоменклатурыСрезПоследних.ТипЦен = &ТипЦен
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	ИТС_ПриказыНаЦены.Дата,
	                      |	ИТС_ПриказыНаЦены.Статус,
	                      |	ИТС_ПриказыНаЦены.Контрагент,
	                      |	ИТС_ПриказыНаЦены.Номенклатура,
	                      |	ЦеныНоменклатурыСрезПоследних.Цена,
	                      |	ИТС_ПриказыНаЦены.Цена,
	                      |	ЦеныНоменклатурыСрезПоследних.Цена - ИТС_ПриказыНаЦены.Цена,
	                      |	ВЫБОР
	                      |		КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток > 0
	                      |			ТОГДА ТоварыНаСкладахОстатки.КоличествоОстаток
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ,
	                      |	0,
	                      |	ЦеныНоменклатурыСрезПоследних.Период,
	                      |	ИТС_ПриказыНаЦены.ДатаНачала,
	                      |	ИТС_ПриказыНаЦены.ДатаОкончания,
	                      |	ИТС_ПриказыНаЦены.ТорговыйПредставитель,
	                      |	0,
	                      |	ИТС_ПриказыНаЦены.ЦенаДействующая,
	                      |	ИТС_ПриказыНаЦены.ЦенаВходящая,
	                      |	ИТС_ПриказыНаЦены.Затраты,
	                      |	ИТС_ПриказыНаЦены.УникальныйИдентификатор,
	                      |	ЛОЖЬ,
	                      |	ЛОЖЬ,
	                      |	""                 "",
	                      |	Закупки.Контрагент.ИТС_Затраты
	                      |ИЗ
	                      |	РегистрСведений.ИТС_ПриказыНаЦены КАК ИТС_ПриказыНаЦены
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ) КАК ЦеныНоменклатурыСрезПоследних
	                      |		ПО ИТС_ПриказыНаЦены.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                      |		ПО ИТС_ПриказыНаЦены.Контрагент.ОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеЗакупки КАК ПоследниеЗакупки
	                      |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Закупки КАК Закупки
	                      |			ПО ПоследниеЗакупки.Номенклатура = Закупки.Номенклатура
	                      |				И ПоследниеЗакупки.Период = Закупки.Период
	                      |		ПО ИТС_ПриказыНаЦены.Номенклатура = ПоследниеЗакупки.Номенклатура
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&Дата, ) КАК ТоварыНаСкладахОстатки
	                      |		ПО ИТС_ПриказыНаЦены.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	                      |ГДЕ
	                      |	ДоговорыКонтрагентов.ТипЦен = ЦеныНоменклатурыСрезПоследних.ТипЦен
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Контрагент,
	                      |	Номенклатура,
	                      |	Определитель УБЫВ,
	                      |	Период УБЫВ");
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ТипЦен", Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("СПЕЦИФИКАЦИЯ"));
		
	ТЗ = Запрос.Выполнить().Выгрузить();
	Журнал.Очистить();
	ЭлементыФормы.Журнал.Значение = ОбработкаТЗ(ТЗ);
	ОбработкаЖурнала();

КонецПроцедуры // СформироватьЖурнал

Процедура ОбработкаЖурнала()

	// проверка на возможность утверждать 1
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УтверждающийПриказы1") Тогда
		ЭлементыФормы.Журнал.Колонки.Утверждение1.Доступность = Истина;
	Иначе
		ЭлементыФормы.Журнал.Колонки.Утверждение1.Доступность = Ложь;
	КонецЕсли;
	
	// проверка на возможность утверждать 2
	Если УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "УтверждающийПриказы2") Тогда
		ЭлементыФормы.Журнал.Колонки.Утверждение2.Доступность = Истина;
	Иначе
		ЭлементыФормы.Журнал.Колонки.Утверждение2.Доступность = Ложь;
	КонецЕсли;
	
	// раскрашиваем строки по статусам
   // УсловноеОформление.Элементы.Очистить();
   // ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
   // ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
   //ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Товары");
   //ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
   //ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НеПорезан");
   //ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
   //ЭлементОтбора.ПравоеЗначение = Истина;
   //ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);

КонецПроцедуры // ОбработкаЖурнала

Функция ОпределитьСреднююЦену(Номенклатура, КоличествоОстаток)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Закупки.Количество,
	                      |	Закупки.Стоимость
	                      |ИЗ
	                      |	РегистрНакопления.Закупки КАК Закупки
	                      |ГДЕ
	                      |	Закупки.Период < &Дата
	                      |	И Закупки.Номенклатура = &Номенклатура
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Закупки.Период УБЫВ");
						  
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Стоимость = 0;
	Количество = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Количество = Количество + Выборка.Количество;
		Стоимость = Стоимость + Выборка.Стоимость;
		Если Количество >= КоличествоОстаток Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Количество >= КоличествоОстаток Тогда
		Возврат Окр(Стоимость / Количество, 2);
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ОпределитьСреднююЦену()


Функция ОбработкаТЗ(ТЗ)
	
	Для Каждого Строка Из ТЗ Цикл
		Если Строка.Определитель = 1 Тогда
			ПараметрыОтбора = Новый Структура("УникальныйИдентификатор, Определитель", Строка.УникальныйИдентификатор, 0);
			МассивСтрок = ТЗ.НайтиСтроки(ПараметрыОтбора);
			КоличествоОстаток = 0;
			ЦенаДействующая = 0;
			Для Каждого Стр Из МассивСтрок Цикл
				КоличествоОстаток = Стр.ЦенаВходящая;
				ЦенаДействующая = Стр.ЦенаДействующая;
				ТЗ.Удалить(Стр);
			КонецЦикла;
			СредняяЦена = ОпределитьСреднююЦену(Строка.Номенклатура, КоличествоОстаток);
			Строка.ЦенаВходящая = ?(КоличествоОстаток = 0, Строка.ЦенаВходящая, ?(СредняяЦена = Неопределено, Строка.ЦенаВходящая, СредняяЦена));
			Строка.ЦенаДействующая = ?(ЗначениеЗаполнено(Строка.ЦенаДействующая), Строка.ЦенаДействующая, ЦенаДействующая);
		КонецЕсли;
		
		// выставляем галки в колонках утверждения
		Если Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден1 Тогда
			Строка.Утверждение1 = Истина;
		ИначеЕсли Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден2 Тогда
			Строка.Утверждение2 = Истина;
		ИначеЕсли Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден12 Тогда
			Строка.Утверждение1 = Истина;
			Строка.Утверждение2 = Истина;
		КонецЕсли;
		
		// отображаем старые цены для завершённых запросов цен
		Если Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены 
			ИЛИ Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден Тогда
			
			Строка.ЦенаДействующая = Строка.ЦенаДействующаяСтарая;
			Строка.ЦенаВходящая = Строка.ЦенаВходящаяСтарая;
			Строка.Затраты = Строка.ЗатратыСтарые;
			
		КонецЕсли;
		
		// вычисляем разницы цен
		Строка.РазницаМеждуНовойИДействующей = Строка.ЦенаДействующая - Строка.ЦенаПредлагаемая;
		Строка.РазницаМеждуНовойИВходЗатраты = Строка.ЦенаПредлагаемая - (Строка.ЦенаВходящая + Строка.Затраты);

		// проставляем статус
		Если Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен Тогда
			Строка.СтатусСтрока = "Получено";
		ИначеЕсли Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден Тогда
			Строка.СтатусСтрока = "Отклонено";
		ИначеЕсли Строка.Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены Тогда
			Строка.СтатусСтрока = "Утверждено";
		Иначе
			Строка.СтатусСтрока = "На рассмотрении";
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Колонки.Удалить("ЦенаДействующаяСтарая");
	ТЗ.Колонки.Удалить("ЦенаВходящаяСтарая");
	ТЗ.Колонки.Удалить("ЗатратыСтарые");
	//ТЗ.Колонки.Удалить("Статус");
	//ТЗ.Колонки.Удалить("УникальныйИдентификатор");
	
	// отбор по статусам
	
	Возврат ПрименитьОтбор();

КонецФункции // ОбработкаТЗ()

Функция ПрименитьОтбор()

	Элемент = Статусы.НайтиПоЗначению(Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены);
	Если ЭлементыФормы.ПоказатьУтвержденные.Значение И Элемент = Неопределено Тогда
		Статусы.Добавить(Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены);
	ИначеЕсли Не ЭлементыФормы.ПоказатьУтвержденные.Значение И Элемент <> Неопределено Тогда
		Статусы.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = Статусы.НайтиПоЗначению(Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден);
	Если ЭлементыФормы.ПоказатьОтклоненные.Значение И Элемент = Неопределено Тогда
		Статусы.Добавить(Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден);
	ИначеЕсли Не ЭлементыФормы.ПоказатьОтклоненные.Значение И Элемент <> Неопределено Тогда
		Статусы.Удалить(Элемент);
	КонецЕсли;
		
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТЗ);
	
	Отбор = Построитель.Отбор.Найти("Статус");
	Если Отбор = Неопределено Тогда
		Отбор = Построитель.Отбор.Добавить("Статус");
	КонецЕсли;
	Отбор.ВидСравнения = ВидСравнения.ВСписке;
	Отбор.Значение = Статусы;
	Отбор.Использование = Истина;
	
	Построитель.Выполнить();
	
	Возврат Построитель.Результат.Выгрузить();

КонецФункции // ПрименитьОтбор()

Процедура КоманднаяПанельЖурналаОбновить(Кнопка)
	
	СформироватьЖурнал();
	
КонецПроцедуры // КоманднаяПанельЖурналаОбновить

Процедура ЖурналПриАктивизацииСтроки(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ЖурналПриАктивизацииСтроки

Процедура КоманднаяПанель1СформироватьЦены(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Журнал.ТекущиеДанные;
	
	Если ТекущиеДанные.Утверждение1 ИЛИ ТекущиеДанные.Утверждение2 Тогда
		ТекстВопроса = "Вы действительно хотите утвердить предлагаемую цену? Будет сформировано дополнительное соглашение с контрагентом об утверждении новой цены на номенклатуру и отправлен ответ торговому представителю.";
	Иначе
		ТекстВопроса = "Вы действительно хотите отказать в утверждении предлагаемой цены? Будет отправлен ответ торговому представителю.";
	КонецЕсли;
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ИТС_ПриказыНаЦены.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ТекущиеДанные.УникальныйИдентификатор);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей[0].ЦенаДействующая = ТекущиеДанные.ЦенаДействующая;
		НаборЗаписей[0].ЦенаВходящая = ТекущиеДанные.ЦенаВходящая;
		НаборЗаписей[0].Затраты = ТекущиеДанные.Затраты;
		НаборЗаписей[0].ОтправленоАгенту = Ложь;
		Если ТекущиеДанные.Утверждение1 Тогда
			НаборЗаписей[0].Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены;
		Иначе
			НаборЗаписей[0].Статус = ?(ТекущиеДанные.Утверждение2, Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены, Перечисления.ИТС_СтатусыПриказовНаЦены.НеУтвержден);
		КонецЕсли;
		
		Если НаборЗаписей[0].Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.СформированыЦены Тогда
			Если СформироватьЦены(ТекущиеДанные) Тогда
				НаборЗаписей.Записать();
				Сообщить("Документ условий поставки успешно сформирован.");
			Иначе
				Сообщить("Не удалось сформировать документ условий поставки.");
			КонецЕсли;
		Иначе
			НаборЗаписей.Записать();
			Сообщить("Отправлен ответ торговому представителю об отказе утверждения предлагаемой цены.");
		КонецЕсли;
	Иначе
		Сообщить("Нарушение целостности регистра. Запись не найдена.");
	КонецЕсли;
	
	СформироватьЖурнал();
	
КонецПроцедуры // КоманднаяПанель1СформироватьЦены

Функция СформироватьЦены(Данные)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	УсловияПоставокПоДоговорамКонтрагентов.Ссылка
		|ИЗ
		|	Документ.УсловияПоставокПоДоговорамКонтрагентов КАК УсловияПоставокПоДоговорамКонтрагентов
		|ГДЕ
		|	УсловияПоставокПоДоговорамКонтрагентов.Контрагент = &Контрагент
		|	И УсловияПоставокПоДоговорамКонтрагентов.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И УсловияПоставокПоДоговорамКонтрагентов.ДатаОкончания > &ДатаОкончания");
	Запрос.УстановитьПараметр("Контрагент", Данные.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Данные.Контрагент.ОсновнойДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДатаОкончания", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		докУсловиеПоставок = Выборка.Ссылка.ПолучитьОбъект();
		докУсловиеПоставок.ДатаОкончания = НачалоДня(Данные.ДатаНачала) - 1;
		докУсловиеПоставок.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
	Попытка
		докУсловиеПоставок = Документы.УсловияПоставокПоДоговорамКонтрагентов.СоздатьДокумент();
		докУсловиеПоставок.Дата = ТекущаяДата();
		докУсловиеПоставок.Контрагент = Данные.Контрагент;
		докУсловиеПоставок.ДоговорКонтрагента = Данные.Контрагент.ОсновнойДоговорКонтрагента;
		докУсловиеПоставок.ДатаНачала = Данные.ДатаНачала;
		докУсловиеПоставок.ДатаОкончания = ?(ЗначениеЗаполнено(Данные.ДатаОкончания), Данные.ДатаОкончания, КонецГода(ТекущаяДата()));
		докУсловиеПоставок.СуммаУсловийДоговора = 1;
		
		Номенклатура = докУсловиеПоставок.НоменклатураДоговора.Добавить();
		Номенклатура.Номенклатура = Данные.Номенклатура;
		Номенклатура.Цена = Данные.ЦенаПредлагаемая;
		Номенклатура.ЕдиницаИзмерения = Данные.Номенклатура.ЕдиницаХраненияОстатков;
		Номенклатура.Коэффициент = Данные.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		Номенклатура.ВалютаЦены = Данные.Контрагент.ОсновнойДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		докУсловиеПоставок.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции // СформироватьЦены

Процедура ИзменитьСтатус()

	ТекущиеДанные = ЭлементыФормы.Журнал.ТекущиеДанные;
	
	НаборЗаписей = РегистрыСведений.ИТС_ПриказыНаЦены.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ТекущиеДанные.УникальныйИдентификатор);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Если ТекущиеДанные.Утверждение1 Тогда
			НаборЗаписей[0].Статус = ?(ТекущиеДанные.Утверждение2, Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден12, Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден1);
		Иначе
			НаборЗаписей[0].Статус = ?(ТекущиеДанные.Утверждение2, Перечисления.ИТС_СтатусыПриказовНаЦены.Утвержден2, Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен);
		КонецЕсли;
		
		Если НаборЗаписей[0].Статус = Перечисления.ИТС_СтатусыПриказовНаЦены.Загружен Тогда
			ТекущиеДанные.СтатусСтрока = "Получено";
		Иначе
			ТекущиеДанные.СтатусСтрока = "На рассмотрении";
		КонецЕсли;
	Иначе
		Сообщить("Нарушение целостности регистра. Запись не найдена.");
	КонецЕсли;
	НаборЗаписей.Записать();

КонецПроцедуры // ИзменитьСтатус

Процедура ЖурналПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ЭлементыФормы.Журнал.ТекущаяКолонка.Имя = "ДатаНачала"
		ИЛИ ЭлементыФормы.Журнал.ТекущаяКолонка.Имя = "ДатаОкончания" Тогда
		
		ТекущиеДанные = ЭлементыФормы.Журнал.ТекущиеДанные;
	
		НаборЗаписей = РегистрыСведений.ИТС_ПриказыНаЦены.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ТекущиеДанные.УникальныйИдентификатор);
		НаборЗаписей.Прочитать();
	
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].ДатаНачала = ТекущиеДанные.ДатаНачала;
			НаборЗаписей[0].ДатаОкончания = ТекущиеДанные.ДатаОкончания;
		Иначе
			Сообщить("Нарушение целостности регистра. Запись не найдена.");
		КонецЕсли;
		НаборЗаписей.Записать();
		
	ИначеЕсли ЭлементыФормы.Журнал.ТекущаяКолонка.Имя = "Утверждение1" 
		ИЛИ ЭлементыФормы.Журнал.ТекущаяКолонка.Имя = "Утверждение2" Тогда
		
		ИзменитьСтатус();
		УстановитьВидимость();
		
	КонецЕсли;
	
КонецПроцедуры // ЖурналПриОкончанииРедактирования

Процедура ПоказатьУтвержденныеПриИзменении(Элемент)
	
	ЭлементыФормы.Журнал.Значение = ПрименитьОтбор();
	
КонецПроцедуры

Процедура ПоказатьОтклоненныеПриИзменении(Элемент)
	
	ЭлементыФормы.Журнал.Значение = ПрименитьОтбор();
	
КонецПроцедуры






