Перем мВалютаРегламентированногоУчета;

Функция Печать() Экспорт
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда

	//Для Возврата или ОтчетаКомитенту или ВозвратТоваровПоставщикуИзНТТ 
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				СсылкаНаОбъект);
	ДанныеДокумента.Вставить("Номер",             				СсылкаНаОбъект.Номер);
	ДанныеДокумента.Вставить("Дата",              				СсылкаНаОбъект.Дата);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				СсылкаНаОбъект);
	ДанныеДокумента.Вставить("Организация",   	  				СсылкаНаОбъект.Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				СсылкаНаОбъект.Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		СсылкаНаОбъект.ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				Неопределено);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("Подразделение", 	  				СсылкаНаОбъект.Подразделение);

	СчетФактураТребуется = ОпределитьСчетФактураТребуется(СсылкаНаОбъект.Ссылка);
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//Для Реализации
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				СсылкаНаОбъект);
	ДанныеДокумента.Вставить("Номер",             				СсылкаНаОбъект.Номер);
	ДанныеДокумента.Вставить("Дата",              				СсылкаНаОбъект.Дата);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				СсылкаНаОбъект);
	ДанныеДокумента.Вставить("Организация",   	  				СсылкаНаОбъект.Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				СсылкаНаОбъект.Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		СсылкаНаОбъект.ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				СсылкаНаОбъект.ОтпускРазрешил);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("Подразделение", 	  				СсылкаНаОбъект.Подразделение);
	ВидДоговора = ЗначениеРеквизитаОбъекта(СсылкаНаОбъект.ДоговорКонтрагента, "ВидДоговора");
	ПередачаНаРеализациюПоКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ДанныеДокумента.Вставить("ПередачаНаРеализациюПоКомиссии",  ПередачаНаРеализациюПоКомиссии);
	СчетФактураТребуется = ОпределитьСчетФактураТребуется(СсылкаНаОбъект.Ссылка);
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);
	
    ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//Для Корректировки Реализации

	Если СсылкаНаОбъект.ВидОперации <> Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного документа возможно только для документов
				|с видом операции ""Исправление в первичных документах""!'");
		СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДляПечати 	= СсылкаНаОбъект.Номер;
	ДатаДляПечати	= СсылкаНаОбъект.Дата;
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ИсправляемыйДокументРеализации) Тогда
		РеквизитыИсправляемогоДокумента = ЗначенияРеквизитовОбъекта(
			СсылкаНаОбъект.ИсправляемыйДокументРеализации, "Номер, Дата");
		НомерДляПечати 	= РеквизитыИсправляемогоДокумента.Номер;
		ДатаДляПечати	= РеквизитыИсправляемогоДокумента.Дата;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДокументСсылка",    				СсылкаНаОбъект);
	ДанныеДокумента.Вставить("Номер",             				НомерДляПечати);
	ДанныеДокумента.Вставить("Дата",              				ДатаДляПечати);
	ДанныеДокумента.Вставить("Ссылка", 			  				Документы.СчетФактураВыданный.ПустаяСсылка());
	ДанныеДокумента.Вставить("ДокументОснование", 				СсылкаНаОбъект);
	ДанныеДокумента.Вставить("Организация",   	  				СсылкаНаОбъект.Организация);
	ДанныеДокумента.Вставить("Контрагент", 		  				СсылкаНаОбъект.Контрагент);
	ДанныеДокумента.Вставить("ДоговорКонтрагента", 		  		СсылкаНаОбъект.ДоговорКонтрагента);
	ДанныеДокумента.Вставить("Руководитель", 	  				Неопределено);
	ДанныеДокумента.Вставить("ГлавныйБухгалтер",  				Неопределено);
	ДанныеДокумента.Вставить("ВалютаРегламентированногоУчета",  мВалютаРегламентированногоУчета);
	ДанныеДокумента.Вставить("ДатаОтгрузкиПередачи",            ДатаДляПечати);
	ДанныеДокумента.Вставить("Подразделение", 	  				СсылкаНаОбъект.Подразделение);

	ВидДоговора = ЗначениеРеквизитаОбъекта(СсылкаНаОбъект.ДоговорКонтрагента, "ВидДоговора");
	ПередачаНаРеализациюПоКомиссии = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ДанныеДокумента.Вставить("ПередачаНаРеализациюПоКомиссии",  ПередачаНаРеализациюПоКомиссии);
	
	СчетФактураТребуется = ОпределитьСчетФактураТребуется(ЭтотОбъект);
	
	СтруктураОтбораСчетаФактуры = Новый Структура;
	СписокВидовСчетовФактур = Новый СписокЗначений;
	СписокВидовСчетовФактур.Добавить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	СтруктураОтбораСчетаФактуры.Вставить("ВидСчетаФактуры", СписокВидовСчетовФактур);
	СтруктураОтбораСчетаФактуры.Вставить("ПометкаУдаления", Ложь);

	КонецЕсли;	
		
	Возврат ПечатьУниверсальногоПередаточногоДокументаэ(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры);
	
КонецФункции // ПечатьУниверсальногоПередаточногоДокумента

Функция ПечатьУниверсальногоПередаточногоДокументаэ(ДанныеДокумента, СчетФактураТребуется, СтруктураОтбораСчетаФактуры = Неопределено, ТабДокумент = Неопределено) Экспорт
	
	Если ДанныеДокумента.Дата < ДатаНачалаПримененияУПД() Тогда
		ТекстСообщения = НСтр("ru = 'Применение формы универсального передаточного (отгрузочного) документа возможно только с "+ДатаНачалаПримененияУПД(Истина)+"!'");
		СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Если СтруктураОтбораСчетаФактуры = Неопределено Тогда
		СчетФактура = НайтиПодчиненныйСчетФактуру(СсылкаНаОбъект, "СчетФактураВыданный");
	Иначе
		СчетФактура = НайтиПодчиненныйСчетФактуру(СсылкаНаОбъект, "СчетФактураВыданный", СтруктураОтбораСчетаФактуры);
	КонецЕсли;
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		// Устанавливаем параметры печати и колонтитулы
		ТабДокумент.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
		ТабДокумент.ПолеСверху 			= 12;
		ТабДокумент.ПолеСлева  			= 0;
		ТабДокумент.ПолеСнизу  			= 0;
		ТабДокумент.ПолеСправа 			= 0;
		ТабДокумент.АвтоМасштаб 		= Истина;
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УниверсальныйПередаточныйДокумент";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) ИЛИ СчетФактураТребуется 
		Тогда
		
		// УПД печатается из документа счет-фактура
		Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
			ТекстСообщения = ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По документу ""%1"" не выписан счет-фактура или он помечен на удаление!'"), ДанныеДокумента.ДокументСсылка);
			СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыСФ = ПолучитьЗначенияРеквизитов(СчетФактура, "Дата, ВидСчетаФактуры, Исправление,НомерИсправления,
			|СчетФактураБезНДС");
		ДанныеДокумента.Вставить("Ссылка", 					СчетФактура); 
		ДанныеДокумента.Вставить("Дата", 					РеквизитыСФ.Дата);
		ДанныеДокумента.Вставить("ВидСчетаФактуры", 		РеквизитыСФ.ВидСчетаФактуры);
		ДанныеДокумента.Вставить("Исправление", 	 		РеквизитыСФ.Исправление);
		ДанныеДокумента.Вставить("НомерИсправления", 		РеквизитыСФ.НомерИсправления);
		ДанныеДокумента.Вставить("СчетФактураБезНДС", 		РеквизитыСФ.СчетФактураБезНДС);
			
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		ДанныеДляПечати = СФПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(СчетФактураОбъект, ДанныеДокумента);
		Если ДанныеДляПечати = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
			ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
		КонецЕсли;

		СФПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент);
		Возврат ТабДокумент;
		
	КонецЕсли;
	
	// УПД печатается по статусу 2
	ДанныеДляПечати = ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента);
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьМакет("УниверсальныйПередаточныйДокумент");

    ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);

	ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	// Устанавливаем параметры печати и колонтитулы
	ТабДокумент.ВерхнийКолонтитул.Выводить          	= Истина;
	ТабДокумент.ВерхнийКолонтитул.НачальнаяСтраница 	= 2;
	ТабДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	НомерНаПечатьСтрокой 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати);
	ДатаНаПечатьСтрокой  	= Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
	ЗаголовокДляПечати 	 	= "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	ТабДокумент.ВерхнийКолонтитул.ТекстСлева   			= ЗаголовокДляПечати;
	ТабДокумент.ВерхнийКолонтитул.ТекстСправа  			= "Лист [&НомерСтраницы]";
	
	Возврат ТабДокумент;
КонецФункции

Функция ДатаНачалаПримененияУПД(ВВидеСтроки = Ложь) Экспорт
	ДатаНачалаПрименения = Дата(2013,1,1);
	Если ВВидеСтроки Тогда
		Возврат Формат(ДатаНачалаПрименения, "ДЛФ=DD");
	Иначе
		Возврат ДатаНачалаПрименения;
	КонецЕсли;
КонецФункции

Функция НайтиПодчиненныйСчетФактуру(Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено) Экспорт

	Если не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено;
	Иначе
		
		Если МетаданныеОснования = Неопределено Тогда
			МетаданныеОснования = ДокументСсылка.Метаданные();
		КонецЕсли; 
		
		Если МетаданныеОснования.Реквизиты.Найти("ИспользоватьДокументРасчетовКакСчетФактуру") <> Неопределено
			И МетаданныеОснования.Реквизиты.Найти("РасчетныйДокумент") <> Неопределено 
			И ДокументСсылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
			Если не ЗначениеЗаполнено(ДокументСсылка.РасчетныйДокумент) Тогда
				Возврат Неопределено;
			Иначе
				Если ТипЗнч(ДокументСсылка.РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
					И Не ДокументСсылка.РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент.Сделка;
					МетаданныеОснования = ДокументСсылка.Метаданные();
					Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
						Возврат Неопределено;
					КонецЕсли;
				Иначе
					ДокументСсылка = ДокументСсылка.РасчетныйДокумент;
					МетаданныеОснования = ДокументСсылка.Метаданные();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйДокумент = Неопределено;

	Запрос = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ПОМЕСТИТЬ ВрмТбл
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";
	
	Если не ВидДокумента = "СчетФактураВыданный" Тогда
		Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ИсключитьИзВыборкиСФ) Тогда
		Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);
		Если ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка В (&ИсключитьИзВыборкиСФ)
				|";
		Иначе
			Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка = &ИсключитьИзВыборкиСФ
				|";
		КонецЕсли;
	КонецЕсли; 
	Если не Отбор = Неопределено Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Булево") Тогда
			
				Запрос.Текст = Запрос.Текст + "
					|	И "+?(ЭлементОтбора.Значение," "," НЕ ")+" СФ.Ссылка."+ЭлементОтбора.Ключ;
			ИначеЕсли ЭлементОтбора.Ключ = "СтавкиНДС" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СтавкаНДС В (&"+ЭлементОтбора.Ключ+")";
			ИначеЕсли ЭлементОтбора.Ключ = "СчетНаОплату" 
						И ВидДокумента = "СчетФактураВыданный" Тогда
			
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				Запрос.Текст = Запрос.Текст + "
					|	И Авансы.СчетНаОплату В (&"+ЭлементОтбора.Ключ+")";
			Иначе
				
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
				Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Массив") 
					ИЛИ ТипЗнч(ЭлементОтбора.Значение) = Тип("СписокЗначений") Тогда
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ + " В (&"+ЭлементОтбора.Ключ + ")";
				Иначе
					Запрос.Текст = Запрос.Текст + "
					|	И СФ.Ссылка."+ЭлементОтбора.Ключ +" = &"+ЭлементОтбора.Ключ;
				КонецЕсли;

			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + ";";
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ Ссылка
	| ИЗ ВрмТбл
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.ПометкаУдаления,
	|	Ссылка.Проведен УБЫВ,
	|	Ссылка.Дата";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйСчетФактуру()

Функция ПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДокумента)
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("Номер", 			  ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("Дата", 			  ДанныеДокумента.Дата);
	ДанныеСчетаФактуры.Вставить("Организация", 		  ДанныеДокумента.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент", 		  ДанныеДокумента.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры", 	  Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ДанныеСчетаФактуры.Вставить("Руководитель", 	  ДанныеДокумента.Руководитель);
	ДанныеСчетаФактуры.Вставить("ГлавныйБухгалтер",   ДанныеДокумента.ГлавныйБухгалтер);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", ДанныеДокумента.ДоговорКонтрагента);
	
	ДанныеСчетаФактуры.Вставить("НомерИсходногоДокумента", 			ДанныеДокумента.Номер);
	ДанныеСчетаФактуры.Вставить("ДатаИсходногоДокумента", 			ДанныеДокумента.Дата);  
	ДанныеСчетаФактуры.Вставить("НомерПлатежноРасчетногоДокумента", "");
	ДанныеСчетаФактуры.Вставить("ДатаПлатежноРасчетногоДокумента", 	"");

	ДанныеДляПечати = //Документы.СчетФактураВыданный.СоздатьДокумент().
	СобратьДанныеДляПечатиПоДокументу(ДанныеДокумента.ДокументСсылка, ДанныеСчетаФактуры);
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//++ ИТС 2017-05-26 ДАФ
	ДанныеДляПечати.Вставить("АдресДоставки",			ДанныеСчетаФактуры.ДокументОснование.АдресДоставки);
	//-- ИТС 2017-05-26 ДАФ
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",			ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		ДанныеСчетаФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		Ложь);
	ДанныеДляПечати.Вставить("НомерИсправления", 		"");
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		ДанныеСчетаФактуры.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
		ПолучитьЗначениеРеквизита(ДанныеДокумента.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	Если НЕ ДанныеДляПечати.Свойство("СчетФактураБезНДС") Тогда
		ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	Ложь);
	КонецЕсли;
	Если ДанныеДокумента.Свойство("ПередачаНаРеализациюПоКомиссии") И ДанныеДокумента.ПередачаНаРеализациюПоКомиссии Тогда
		ДанныеДляПечати.Вставить("ПередачаНаРеализациюПоКомиссии", ДанныеДокумента.ПередачаНаРеализациюПоКомиссии);
		Если ДанныеДляПечати.Грузоотправитель = "он же" Тогда
			ДанныеДляПечати.Грузоотправитель = ДанныеДляПечати.Поставщик;
		КонецЕсли;
	КонецЕсли;

	Основание = Строка(ДанныеДокумента.ДоговорКонтрагента); 
	Если ДанныеДокумента.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеДокумента.Доверенность) Тогда
		ДанныеДляПечати.Вставить("Основание", Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеДокумента.Доверенность);
	Иначе
		ДанныеДляПечати.Вставить("Основание", Основание);	
	КонецЕсли;
	
	СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	Если ДанныеДокумента.Свойство("ДатаОтгрузкиПередачи") Тогда
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.ДатаОтгрузкиПередачи);
	Иначе
		ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", ДанныеДокумента.Дата);
	КонецЕсли;
	ДанныеДляПечати.Вставить("СтатусУПД", 			 2);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт

	Дата 		 = ДанныеДляПечати.ДатаСчетФактуры; 
	ЭтоПечатьУПД = ДанныеДляПечати.Свойство("СтатусУПД");
		
	БезПереходаПраваСобственности = Ложь;
	Если ЭтоПечатьУПД И (ДанныеДляПечати.СтатусУПД = 2) Тогда
		Если ДанныеДляПечати.Свойство("ПередачаНаРеализациюПоКомиссии") 
			И ДанныеДляПечати.ПередачаНаРеализациюПоКомиссии Тогда
			БезПереходаПраваСобственности = Истина;
		КонецЕсли;
	КонецЕсли;
		
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, Дата);
	
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент");//, ОбособленноеПодразделение");
			Если //РеквизитыПокупателя.ОбособленноеПодразделение И   //ИЗМЕНЕНО
				ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	
	Если ЭтоПечатьУПД Тогда
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = Строка(ДанныеДляПечати.НомерИсправления);
			ОбластьМакета.Параметры.ДатаИсправления  = Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		Иначе
			ОбластьМакета.Параметры.НомерИсправления = "--";
			ОбластьМакета.Параметры.ДатаИсправления  = "--";
		КонецЕсли;
	Иначе
		
		Если ДанныеДляПечати.Исправление Тогда
			ОбластьМакета.Параметры.НомерИсправления = "Исправление №" + Строка(ДанныеДляПечати.НомерИсправления) 
				+ " от " + Формат(Дата, "ДФ='дд ММММ гггг'") + " г.";
		Иначе 	
			ОбластьМакета.Параметры.НомерИсправления = "Исправление № -- от --";
		КонецЕсли;
	КонецЕсли;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПоставщика = "--";
		ОбластьМакета.Параметры.АдресПоставщика 		= "--";
		ОбластьМакета.Параметры.ИННпоставщика 			= "--";
		
	Иначе
	
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ?(ЭтоПечатьУПД, "", "Продавец: ") 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
			
		ОбластьМакета.Параметры.АдресПоставщика = ?(ЭтоПечатьУПД, "", "Адрес: ") 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,");
		
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		ОбластьМакета.Параметры.ИННпоставщика = ?(ЭтоПечатьУПД, "", "ИНН/КПП продавца: ")
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь) + КПП;
		
	КонецЕсли;
	
	Если ЭтоПечатьУПД Тогда
		НомерНаПечатьСтрокой 	= ОбщегоНазначения.ПолучитьНомерНаПечать(ДанныеДляПечати);
		ДатаНаПечатьСтрокой 	= Формат(ДанныеДляПечати.Дата, "ДФ='дд ММММ гггг'") + " г.";
       	ОбластьМакета.Параметры.Номер = НомерНаПечатьСтрокой;
		ОбластьМакета.Параметры.Дата  =	ДатаНаПечатьСтрокой;
		ЗаголовокДляПечати = "Универсальный передаточный документ № " + НомерНаПечатьСтрокой + " от " +  ДатаНаПечатьСтрокой;
	Иначе
		ЗаголовокДляПечати = СформироватьЗаголовокДокумента(ДанныеДляПечати, "Счет-фактура") + " г.";
		ОбластьМакета.Параметры.Номер = ЗаголовокДляПечати;
	КонецЕсли;
	
	ТолькоУслуги = Истина;
	Для каждого СтрокаТовар Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		Если (ТипЗнч(СтрокаТовар.Товар) = Тип("СправочникСсылка.Номенклатура") И НЕ СтрокаТовар.Товар.Услуга) Тогда
			ТолькоУслуги = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
		ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
		ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		
	Иначе
		
		Если ТолькоУслуги Тогда
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ") + "--";
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя  = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") + "--";
		Иначе
			СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(
			    ?(БезПереходаПраваСобственности, ДанныеДляПечати.Поставщик, 
				?(ДанныеДляПечати.Грузоотправитель = "он же", Неопределено, ДанныеДляПечати.Грузоотправитель)), Дата);
			СведенияОГрузополучателе  =  ?(БезПереходаПраваСобственности, СведенияОПокупателе, 
				УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Грузополучатель, Дата));
			
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ?(ЭтоПечатьУПД, "", "Грузоотправитель и его адрес: ")
				+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузоотправитель), 
				"--", 
				?(ДанныеДляПечати.Грузоотправитель = "он же", 
					ДанныеДляПечати.Грузоотправитель, 
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес,")));
			
			Если ДанныеДляПечати.Свойство("АдресДоставки") 
				И НЕ ПустаяСтрока(ДанныеДляПечати.АдресДоставки) Тогда
				ПредставлениеГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					ДанныеДляПечати.АдресДоставки,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование") + ", " + ДанныеДляПечати.АдресДоставки);
			Иначе
				ПредставлениеГрузополучателя = ?(ЭтоПечатьУПД, "", "Грузополучатель и его адрес: ") 
					+ ?(НЕ ЗначениеЗаполнено(ДанныеДляПечати.Грузополучатель), 
					"--",
					ФормированиеПечатныхФорм.ОписаниеОрганизации(
						СведенияОГрузополучателе, "ПолноеНаименование, ФактическийАдрес,"));
			КонецЕсли;
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ПредставлениеГрузополучателя;
				
		КонецЕсли;
	
	КонецЕсли;

	СтрокаПоДокументу = "";
	Если ДанныеДляПечати.Свойство("ТаблицаДатОплат") Тогда
		Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
				И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПоДокументу = СтрокаПоДокументу
				+ ?(ПустаяСтрока(СтрокаПоДокументу), ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № "),", ")
				+ ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента 
				+ " от " + Формат(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy") + " г.";
			
		КонецЦикла; 
	КонецЕсли;
	Если ПустаяСтрока(СтрокаПоДокументу) Тогда
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "-- от --";
		Иначе
			СтрокаПоДокументу = ?(ЭтоПечатьУПД, "", "К платежно-расчетному документу № ") + "   от";
		КонецЕсли; 
	КонецЕсли; 
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
		// В УПД в статусе 2 ставятся прочерки показатели, установленные в качестве обязательных исключительно для счета-фактуры: 
		// - «К платежно-расчетному документу» (строка 7); 
		СтрокаПоДокументу = "--";
	КонецЕсли;
	ОбластьМакета.Параметры.ПоДокументу = СтрокаПоДокументу;
	
	Если БезПереходаПраваСобственности Тогда
		
		ОбластьМакета.Параметры.ПредставлениеПокупателя = "--";
		ОбластьМакета.Параметры.АдресПокупателя 		= "--";
		ОбластьМакета.Параметры.ИННПокупателя 			= "--";
		//++ ИТС 2017-05-26 ДАФ
		ОбластьМакета.Параметры.АдресДоставки			= "--";
		//-- ИТС 2017-05-26 ДАФ
		
	Иначе
	
		ОбластьМакета.Параметры.ПредставлениеПокупателя = ?(ЭтоПечатьУПД, "", "Покупатель: ") 
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,");
		ОбластьМакета.Параметры.АдресПокупателя = ?(ЭтоПечатьУПД, "", "Адрес: ")
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,");
					
		Если ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
			КПП = ДанныеДляПечати.КППКонтрагента;
		Иначе         
		Если СведенияОПодразделенииПокупателя <> Неопределено Тогда
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
		Иначе
			КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
		КонецЕсли;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(КПП) Тогда
			КПП = "/" + КПП;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИННПокупателя = ?(ЭтоПечатьУПД, "", "ИНН/КПП покупателя: ")
			+ ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь) + КПП;
			
		//++ ИТС 2017-05-26 ДАФ
		ОбластьМакета.Параметры.АдресДоставки = ?(ЭтоПечатьУПД, "", "Адрес: ")
			+ ДанныеДляПечати.АдресДоставки;
		//-- ИТС 2017-05-26 ДАФ
			
	КонецЕсли;
		
	ОбластьМакета.Параметры.Валюта = ?(ЭтоПечатьУПД, "", "Валюта: наименование, код ")
		+ ?(ЗначениеЗаполнено(ДанныеДляПечати.Валюта), 
			ДанныеДляПечати.Валюта.НаименованиеПолное + ", " + ДанныеДляПечати.Валюта.Код, "");		
			
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим заголовок таблицы
	ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаЗаголовокТаблицы.Параметры.Заполнить(ДанныеДляПечати);
	ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
	
	// Дополнительная подготовка данных для вывода в табличную часть
	ВыборкаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ВыборкаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Если ЭтоПечатьУПД Тогда
		ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
		Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварАртикул";
		ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ВыводитьКоды 	= Истина;
			КолонкаТоварКод = "ТоварКод";
		Иначе
			ВыводитьКоды 	= Ложь;
			КолонкаТоварКод	= "";
		КонецЕсли;
	Иначе
		ВыводитьКоды 	= Ложь;
		КолонкаТоварКод	= "";
	КонецЕсли;

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
		Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию И 
			(Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
		 	ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			Если (НЕ Строчка.СуммаВключаетНДС) ИЛИ Строчка.Цена = 0 Тогда
				Строчка.Цена = Окр(Строчка.СуммаСНДС / Строчка.Количество, 2);
			КонецЕсли;
		Иначе
			Если Строчка.СуммаВключаетНДС Тогда
				Строчка.Цена = 0;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
		Строчка.ТоварКод = ?(ВыводитьКоды, Строчка[КолонкаТоварКод], "");
		
	КонецЦикла;
		
	ВыборкаСтрокТовары.Свернуть("Товар, ТоварНаименование, ТоварКод, ЕдиницаИзмерения, ЕдиницаИзмеренияКод, Цена, СтавкаНДС,
		|НомерГТД, ПредставлениеГТД, СтранаПроисхождения, СтранаПроисхожденияКод, ПредставлениеСтраны", 
		"Количество, Сумма, СуммаНДС, СуммаСНДС, СуммаБезНДС, НомерСтроки");
	
	// Выводим строки таблицы
	ОбластьМакета       = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаИтого  = Макет.ПолучитьОбласть("Итого");
	Если ЭтоПечатьУПД Тогда
		ОбластьМакетаПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
	Иначе
		ОбластьМакетаПодвалНакладной = Новый ТабличныйДокумент;
	КонецЕсли;
	КоличествоСтраниц = 1;
	
	НомерСтроки     = 0;
	КоличествоСтрок = ВыборкаСтрокТовары.Количество();

	Для Каждого Строчка Из ВыборкаСтрокТовары Цикл
		
		НомерСтроки = НомерСтроки + 1;
		Строчка.НомерСтроки = НомерСтроки;
		
		ОбластьМакета.Параметры.Заполнить(Строчка);

		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			ОбластьМакета.Параметры.ТоварНаименование = Строчка.Товар;
		КонецЕсли;
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ОбластьМакета.Параметры.ТоварНаименование);
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбластьМакета.Параметры.Стоимость = Строчка.СуммаБезНДС;
			ОбластьМакета.Параметры.Цена   	  = Строчка.Цена;
		Иначе
			ОбластьМакета.Параметры.Стоимость  = 0;
			ОбластьМакета.Параметры.Количество = 0;
			ОбластьМакета.Параметры.Цена       = 0;
		КонецЕсли;	
		
		ОбластьМакета.Параметры.Всего     = Строчка.СуммаСНДС;
		ОбластьМакета.Параметры.СтавкаНДС = Строчка.СтавкаНДС;
		
		Если Строчка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
			ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
		КонецЕсли;
		
		Если ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
			И ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ОбластьМакета.Параметры.Акциз = "без акциза";
		КонецЕсли;	
		
		Если Строка(Строчка.ПредставлениеСтраны) = "Россия" 
			ИЛИ Строка(Строчка.ПредставлениеСтраны) = "Российская Федерация"
			ИЛИ Строчка.СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда			
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		Иначе
			Если ЗначениеЗаполнено(Строчка.СтранаПроисхождения) Тогда
				ОбластьМакета.Параметры.ПредставлениеСтраны  = СокрЛП(Строчка.СтранаПроисхождения.Наименование);
			Иначе
				ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
				ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
				ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			КонецЕсли;
		КонецЕсли; 
	
		// Проставляем прочерки в незаполненные графы в соответствии с Постановлением
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			
			ОбластьМакета.Параметры.Количество = "--";
			ОбластьМакета.Параметры.Цена       = "--";
			ОбластьМакета.Параметры.Стоимость  = "--";
			ОбластьМакета.Параметры.Акциз      = "--";
			
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
				ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
				ОбластьМакета.Параметры.Количество = "--";
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
				ОбластьМакета.Параметры.Цена = "--";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
			
			// Ставим прочерки в графах, которые установленные в качестве обязательных исключительно для счета-фактуры
			//- «В том числе сумма акциза» (графа 6); 
			//- «Налоговая ставка» (графа 7);
			//- «Цифровой код страны происхождения товара» (графа 10);
			//- «Краткое наименование страны происхождения товара» (графа 10а);
			//- «Номер таможенной декларации» (графа 11). 
			
			ОбластьМакета.Параметры.Акциз 		= "--";
			ОбластьМакета.Параметры.СтавкаНДС 	= "--";
			ОбластьМакета.Параметры.СуммаНДС 	= ?(Строчка.СуммаНДС <> 0 , Строчка.СуммаНДС, "--");
			ОбластьМакета.Параметры.СтранаПроисхожденияКод 	= "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны 	= "--";
			ОбластьМакета.Параметры.ПредставлениеГТД 		= "--";
			
		КонецЕсли;
		
		// Проверим возможность вывода табличного документа
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(ОбластьМакета);
		Если НомерСтроки = КоличествоСтрок Тогда
			// Если последняя строка, то должен поместится итог и подвал
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтого);
			СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			Если ЭтоПечатьУПД Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвалНакладной);
			КонецЕсли;
		КонецЕсли;
						
		Если НЕ ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом) Тогда
			
			Если КоличествоСтрок > 0 Тогда
				// Вывод разделителя и заголовка таблицы на новой странице
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	КоличествоЛистов = ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	ДанныеДляПечати.Вставить("КоличествоЛистов", КоличествоЛистов);

	Если КоличествоСтрок > 0 Тогда
		ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	КонецЕсли; 
		
	// Выводим строку "Всего к оплате"
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСтоимость = ВыборкаСтрокТовары.Итог("СуммаБезНДС");
	КонецЕсли;
	
	ИтогоСуммаНДС = ВыборкаСтрокТовары.Итог("СуммаНДС");
	Если ЭтоПечатьУПД И ДанныеДляПечати.СтатусУПД = 2 Тогда
	    ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ?(ИтогоСуммаНДС <> 0, ИтогоСуммаНДС, "--");
	ИначеЕсли ДанныеДляПечати.СчетФактураБезНДС Тогда
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакетаИтого.Параметры.ИтогоСуммаНДС = ИтогоСуммаНДС;
	КонецЕсли;
	ОбластьМакетаИтого.Параметры.ИтогоВсего = ВыборкаСтрокТовары.Итог("СуммаСНДС");
	
	ТабДокумент.Вывести(ОбластьМакетаИтого);
	
	// Выводим подвал
	ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДляПечати);
							
	ОбластьМакетаПодвал.Параметры.Свидетельство = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОПоставщике, "Свидетельство,");
	
	ТабДокумент.Вывести(ОбластьМакетаПодвал);
 	
КонецПроцедуры //ВывестиСчетФактуруВТабличныйДокумент

Процедура ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати) Экспорт
	
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Поставщик, ДанныеДляПечати.Дата);
		
	КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "КПП,", Ложь);
	Если ЗначениеЗаполнено(КПП) Тогда
		КПП 	 = "/" + КПП;
	КонецЕсли;
	ИННпоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН,", Ложь);
	ИННпоставщика = ?(ПустаяСтрока(ИННпоставщика), "", "ИНН") + ?(ПустаяСтрока(ИННпоставщика) ИЛИ ПустаяСтрока(КПП), " ", "/КПП ")
 		+ ИННпоставщика + КПП;
	
	СведенияОПокупателе   = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
	СведенияОПодразделенииПокупателя = Неопределено;
	Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		Если ТипЗнч(ДанныеДляПечати.Покупатель) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеДляПечати.Покупатель) Тогда
			РеквизитыПокупателя = ПолучитьЗначенияРеквизитов(ДанныеДляПечати.Покупатель, "ГоловнойКонтрагент");//, ОбособленноеПодразделение");
			Если //РеквизитыПокупателя.ОбособленноеПодразделение И 
				ЗначениеЗаполнено(РеквизитыПокупателя.ГоловнойКонтрагент) Тогда   //ИЗМЕНЕНО
				СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(РеквизитыПокупателя.ГоловнойКонтрагент, ДанныеДляПечати.Дата);
				СведенияОПодразделенииПокупателя = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ДанныеДляПечати.Покупатель, ДанныеДляПечати.Дата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ДанныеДляПечати.Свойство("КППКонтрагента") И ЗначениеЗаполнено(ДанныеДляПечати.КППКонтрагента) Тогда
		КПП = ДанныеДляПечати.КППКонтрагента;
	Иначе    
	Если СведенияОПодразделенииПокупателя <> Неопределено Тогда
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПодразделенииПокупателя, "КПП,", Ложь);
	Иначе
		КПП = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "КПП,", Ложь);
	КонецЕсли;
	КонецЕсли;
	
	ИННПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН,", Ложь);
	ИННПокупателя = ?(ПустаяСтрока(ИННПокупателя), "", "ИНН") + ?(ПустаяСтрока(ИННПокупателя) ИЛИ ПустаяСтрока(КПП), " " , "/КПП ")
		+ ИННПокупателя + ?(ПустаяСтрока(КПП), "" , "/") + КПП;

		
	Если ЗначениеЗаполнено(ДанныеДляПечати.ДатаОтгрузкиПередачи) Тогда
		
		ШаблонДатыОтгрузкиПередачи = Формат(ДанныеДляПечати.ДатаОтгрузкиПередачи, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		
		ДлинаДаты = 32;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		
		ДатаОтгрузкиПередачи = ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
			СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
			СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
			"года");
	Иначе
		ДатаОтгрузкиПередачи = "«      »                    20     года";
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
	ОбластьМакета.Параметры.Заполнить(ДанныеДляПечати);
	ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = ДатаОтгрузкиПередачи;
	ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННпоставщика), "" , ", ") + ИННпоставщика;
	ОбластьМакета.Параметры.ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,")
		+ ?(ПустаяСтрока(ИННПокупателя), "" , ", ") + ИННПокупателя;
	
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры // ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент

Процедура СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати) Экспорт
	
	// Если в данных печати уже заполнены ФИО и должность кладовщика - ничего формировать не нужно
	Если ДанныеДляПечати.Свойство("ФИОКладовщика") И ЗначениеЗаполнено(ДанныеДляПечати.ФИОКладовщика) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеДляПечати.Свойство("КладовщикДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("ДатаДокументаДляУПД")
		ИЛИ НЕ ДанныеДляПечати.Свойство("ЗаКладовщикаПоПриказуДляУПД") ИЛИ НЕ ДанныеДляПечати.Свойство("Организация") Тогда
		ДанныеДляПечати.Вставить("ФИОКладовщика", 		"");
		ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
	 	Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеДляПечати.КладовщикДляУПД) Тогда
		ФамилияИмяОтчествоФизЛица  	  = ФормированиеПечатныхФорм.ФамилияИмяОтчество(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД);
		ФамилияИмяОтчествоКладовщика  = ФамилияИмяОтчествоФизЛица.Фамилия + " " + ФамилияИмяОтчествоФизЛица.Имя + " " + ФамилияИмяОтчествоФизЛица.Отчество;
		ФИОКладовщика         		  = ФамилияИнициалыФизЛица(ФамилияИмяОтчествоКладовщика);
		ФИОКладовщика = ФИОКладовщика  + ?(ЗначениеЗаполнено(ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД), " " + ДанныеДляПечати.ЗаКладовщикаПоПриказуДляУПД, "");
		
		ПодразделениеДолжностьФизЛица = ФормированиеПечатныхФорм.ДолжностьОтветственногоЛицаОрганизации(ДанныеДляПечати.КладовщикДляУПД, ДанныеДляПечати.ДатаДокументаДляУПД, ДанныеДляПечати.Организация);
		ДолжностьКладовщика       	  = ПодразделениеДолжностьФизЛица.Должность;
	Иначе
		ФИОКладовщика		          = "";
		ДолжностьКладовщика 		  = "";
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ФИОКладовщика", 		ФИОКладовщика);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", ДолжностьКладовщика);
	
КонецПроцедуры

Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура(Реквизиты);
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Структура")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		
		СтруктураРеквизитов = Реквизиты;
		
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив")
	      ИЛИ ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		
		СтруктураРеквизитов = Новый Структура;
		Для каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра Реквизиты: %1'"),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ОпределитьСчетФактураТребуется(ДокументОбъект) Экспорт 
	
	УчитыватьНДС = ОрганизацияУчитываетНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	РеквизитыДоговора = ЗначенияРеквизитовОбъекта(ДокументОбъект.ДоговорКонтрагента, "УчетАгентскогоНДС, ВидДоговора");
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВидДокумента = МетаданныеДокумента.Имя;
	
	Если ВидДокумента = "ВозвратТоваровПоставщику" ИЛИ ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ" Тогда
		Если НЕ РеквизитыДоговора.УчетАгентскогоНДС 
			И НЕ РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Возврат ДокументОбъект.ПоставщикуВыставляетсяСчетФактураНаВозврат;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидДокумента = "КорректировкаРеализации" ИЛИ ВидДокумента = "РеализацияТоваровУслуг" Тогда
		ЕстьНДС = (ДокументОбъект.Товары.Итог("СуммаНДС") > 0) ИЛИ (ДокументОбъект.Услуги.Итог("СуммаНДС") > 0);
		Если НЕ УчитыватьНДС Тогда
			Возврат ЕстьНДС;
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ВидДокумента = "ОтчетКомитентуОПродажах" Тогда
		ЕстьНДС = ДокументОбъект.Товары.Итог("СуммаНДСВознаграждения") > 0; // В этом виде документов по-другому
		Если НЕ УчитыватьНДС Тогда
			Возврат ЕстьНДС;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ОпределитьСчетФактураТребуется()

Функция ОрганизацияУчитываетНДС(Организация, Знач Дата) Экспорт 

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	ОшибкаВПолучении = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация, "Нал");
		
	Возврат ?(ОшибкаВПолучении, Ложь, Не УчетнаяПолитика.ОрганизацияНеЯвляетсяПлательщикомНДС);

КонецФункции

Функция СФПодготовитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(СФ, ДанныеСчетФактуры = Неопределено) Экспорт
	
	ДанныеДляПечати = Неопределено;
	УчетнаяПолитика = Неопределено;
 	
	СобратьДанныеДляПечати(СФ, ДанныеДляПечати, УчетнаяПолитика);
	
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат Неопределено;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",			СФ.Дата);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры", 		СФ.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление", 	 		СФ.Исправление);
	ДанныеДляПечати.Вставить("НомерИсправления", 		СФ.НомерИсправления);
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", 		СФ.ДоговорКонтрагента);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 		СФ.СчетФактураБезНДС);
	ДанныеДляПечати.Вставить("КППКонтрагента", 	 		"");       //ИСПРАВИЛ
	ДанныеДляПечати.Вставить("ДокументОснование", 	 	СФ.ДокументОснование);
	ДанныеДляПечати.Вставить("ВидАгентскогоДоговора",   
    ПолучитьЗначениеРеквизита(СФ.ДоговорКонтрагента, "ВидАгентскогоДоговора"));
	
	СформироватьФИОКладовщикаДляПечатиУниверсальногоПередаточногоДокумента(ДанныеДляПечати);
	
	ТипОснования = ТипЗнч(ДанныеДляПечати.ДокументОснование);
	Если СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
		
		ТекстСообщения = "";
		
		Если ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется для документа ""Отражение начисления НДС""";
		ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			ТекстСообщения = "Форма универсального передаточного документа не применяется при оформлении счетов-фактур по отчетам комиссионеров о продажах";
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
			СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("СтатусУПД", 1);
	
	Основание = Строка(СФ.ДоговорКонтрагента);
	
	//++ ИТС 2017-05-26 ДАФ
	Если ЗначениеЗаполнено(СФ.ДокументОснование.НомерЗаказаПокупателя) Тогда
		Основание = Основание + " заказ № " + СФ.ДокументОснование.НомерЗаказаПокупателя;	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СФ.ДокументОснование.ДатаЗаказаПокупателя) Тогда
		Основание = Основание + " от " + Формат(СФ.ДокументОснование.ДатаЗаказаПокупателя, "ДФ=dd.MM.yy");	
	КонецЕсли;
	
	Если СФ.Контрагент.Код = "000000451" Тогда
		Основание = Основание + " ASN № " + ОбщегоНазначения.ПолучитьНомерНаПечать(СФ);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("АдресДоставки", СФ.ДокументОснование.АдресДоставки);
	//-- ИТС 2017-05-26 ДАФ
	
	Если ДанныеДляПечати <> Неопределено И ДанныеДляПечати.Свойство("Доверенность") И ЗначениеЗаполнено(ДанныеДляПечати.Доверенность) Тогда
		ДанныеДляПечати.Вставить("Основание", Основание + ?(ПустаяСтрока(Основание), "", "; ") + ДанныеДляПечати.Доверенность);
	Иначе
		ДанныеДляПечати.Вставить("Основание", Основание);
	КонецЕсли;
	
	// Дата совершения факта хозяйственной жизни. Не может быть ранее даты составления УПД.
	ДанныеДляПечати.Вставить("ДатаОтгрузкиПередачи", 	СФ.Дата);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура СобратьДанныеДляПечати(СФ, ДанныеДляПечати, УчетнаяПолитика) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(СФ.Дата);
	Корректировочный = СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	ДанныеДляПечати = Неопределено;
	
	Для Каждого СтрДокОснования Из СФ.ДокументыОснования Цикл
		// Получить экземпляр документа на печать
		Если Не ЗначениеЗаполнено(СтрДокОснования.ДокументОснование) Тогда
			Продолжить;
		ИначеЕсли Не СтрДокОснования.ДокументОснование.Проведен Тогда
			Продолжить;
		КонецЕсли;
		
		ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиПоДокументу(СФ, СФ.ДокументОснование);
		
		Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
			
			Если ДанныеДляПечати = Неопределено Тогда
				ДанныеДляПечати = ЭкземплярДанныхДляПечати;
			Иначе
				Для Каждого СтрДанных Из ЭкземплярДанныхДляПечати Цикл
					
					Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
						СтараяТабЧасть = ДанныеДляПечати.ТабличнаяЧасть;
						НоваяТабЧасть = СтрДанных.Значение;
						
						Для Каждого НоваяСтрокаТабЧасти Из НоваяТабЧасть Цикл
							СтрокаТабЧасти = СтараяТабЧасть.Добавить();
							
							Для Каждого ТекКол Из НоваяТабЧасть.Колонки Цикл
								Если СтараяТабЧасть.Колонки.Найти(ТекКол.Имя) <> Неопределено Тогда
									СтрокаТабЧасти[ТекКол.Имя] = НоваяСтрокаТабЧасти[ТекКол.Имя];
								КонецЕсли;
							КонецЦикла;
							
						КонецЦикла;
						
					Иначе
						Если Не ДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
							// Если данный параметр для печати шапки документа еще не  определен - то определяем его
							ДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
			
	Если ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
		Возврат;
	ИначеЕсли ДанныеДляПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДатОплат = СФ.ДатаНомерДокументовОплаты.Выгрузить();
	ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
	СтрокиКУдалению = Новый массив();
	Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
		Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
			и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
			СтрокиКУдалению.Добавить(СтрокаОплат);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДатОплат.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ДанныеДляПечати.Вставить("ТаблицаДатОплат", ТаблицаДатОплат);
	
	Если Корректировочный И ДанныеДляПечати <> Неопределено Тогда
		
		КолонкиГруппировок = ""
		+"Номенклатура,"
		+"НаименованиеТовара,"
		+"Серия,"
		+"Характеристика,"
		+"НаименованиеЕдиницыИзмерения,"
		+"ЕдиницаИзмеренияКод,"
		+"ЦенаДоИзменения,"	
		+"ЦенаПослеИзменения,"
		+"СтавкаНДС";
		
		КолонкиСуммирования = ""
		+"СуммаНДСДоИзменения,"
		+"СуммаНДСПослеИзменения,"
		+"СтоимостьСНДСДоИзменения,"
		+"СтоимостьСНДСПослеИзменения,"
		+"РазницаБезНДСУвеличение,"
		+"РазницаБезНДСУменьшение,"
		+"РазницаНДСУвеличение,"
		+"РазницаНДСУменьшение,"
		+"РазницаСНДСУвеличение,"
		+"РазницаСНДСУменьшение,"
		+"СтоимостьБезНДСДоИзменения,"
		+"СтоимостьБезНДСПослеИзменения,"
		+"КоличествоДоИзменения,"
		+"КоличествоПослеИзменения";
		
		ДанныеДляПечати.ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
		
	КонецЕсли; 	

КонецПроцедуры

Функция СобратьДанныеДляПечатиПоДокументу(СФ, ДокОснование, ДанныеСчетаФактуры = Неопределено) Экспорт
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(СФ.Дата);
	Корректировочный = СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;

	ТипОснования = ТипЗнч(ДокОснование);
	
	Если СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеСФнаАвансИСуммовуюРазницу(СФ, ДокОснование);
	ИначеЕсли ТипОснования      = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомитентуОПродажах(СФ, ДокОснование);
	Иначе   
		Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоРеализацияТоваровУслуг(СФ, ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщику(СФ, ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(СФ, ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтчетКомиссионераОПродажах(СФ, ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеРеализацииТоваровИУслугНДС") Тогда
		ЭкземплярДанныхДляПечати = СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(СФ, ДокОснование);
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если Корректировочный Тогда
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ДокОснование, СФ.Ссылка);
		Иначе
			ЭкземплярДанныхДляПечати = СобратьДанныеДляПечатиИсправленияСчетаФактуры(ДокОснование, СФ.Ссылка);
		КонецЕсли;
	Иначе
		ЭкземплярДанныхДляПечати = Неопределено;
	КонецЕсли;
	КонецЕсли;
	
	Если ЭкземплярДанныхДляПечати <> Неопределено Тогда
		Если ВерсияПостановления = 2 И СФ.ВалютаДокумента <> мВалютаРегламентированногоУчета И СФ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
			ПерезаполнитьСуммыПоУЕвРублях(СФ, ЭкземплярДанныхДляПечати, ДокОснование);
			ЭкземплярДанныхДляПечати.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСчетаФактуры <> Неопределено Тогда
		ЭкземплярДанныхДляПечати.Вставить("Номер",            ДанныеСчетаФактуры.Номер);
		ЭкземплярДанныхДляПечати.Вставить("Дата",             ДанныеСчетаФактуры.Дата);
		ЭкземплярДанныхДляПечати.Вставить("НомерПРД",         ДанныеСчетаФактуры.НомерПлатежноРасчетногоДокумента);
		ЭкземплярДанныхДляПечати.Вставить("ДатаПРД",          ДанныеСчетаФактуры.ДатаПлатежноРасчетногоДокумента);
	КонецЕсли;
	
	Возврат ЭкземплярДанныхДляПечати;
	
КонецФункции

Функция СобратьДанныеПоРеализацияТоваровУслуг(СФ, ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
				   |	РеализацияТоваровУслуг.Организация,
				   |	РеализацияТоваровУслуг.Организация КАК Поставщик,
				   |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
				   |			ТОГДА ""он же""
				   |		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
				   |	КОНЕЦ КАК Грузоотправитель,
				   |	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
				   |	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
				   |	ВЫБОР
				   |		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
				   |			ТОГДА РеализацияТоваровУслуг.Контрагент
				   |		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
				   |	КОНЕЦ КАК Грузополучатель,
				   |	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
				   |	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
				   |	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
				   |	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
				   |	РеализацияТоваровУслуг.АдресДоставки,
				   |	РеализацияТоваровУслуг.ОтпускРазрешил,
				   |	РеализацияТоваровУслуг.ОтпускПроизвел,
				   |	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
				   |	РеализацияТоваровУслуг.ДоверенностьНомер,
				   |	РеализацияТоваровУслуг.ДоверенностьДата,
				   |	РеализацияТоваровУслуг.ДоверенностьВыдана,
				   |	РеализацияТоваровУслуг.ДоверенностьЧерезКого
				   |ИЗ
				   |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				   |ГДЕ
				   |	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры КАК Серия,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслугТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	"""",
	|	NULL,
	|	NULL,
	|	"""",
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.Представление,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков = &ПустаяЕдиница
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.НомерСтроки,
	|	2,
	|	NULL,
	|	РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
	|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СФ.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СФ.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары 		  = Ложь;
	ЕстьУслуги 		  = Ложь;

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 1);
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.НомерТЧ = 2);
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена = ?(ВыборкаСтрокТовары.Цена <> 0, ?(НЕ Шапка.СуммаВключаетНДС,?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество),ВыборкаСтрокТовары.Цена),
						 ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
	КонецЦикла;

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЕстьТовары И ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтпускПроизвел);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
	ИначеЕсли ЕстьУслуги Тогда
		Если ЗначениеЗаполнено(Шапка.ОтпускРазрешил) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 			Шапка.ОтпускРазрешил);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		Шапка.ДатаДокумента);
		Иначе	
			ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
		КонецЕсли;
	КонецЕсли;
	ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Неопределено);
	
	Если ЗначениеЗаполнено(Шапка.ДоверенностьНомер) ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьДата)
		ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьВыдана) ИЛИ ЗначениеЗаполнено(Шапка.ДоверенностьЧерезКого) Тогда
		Доверенность = ПодставитьПараметрыВСтроку(
		НСтр("ru = 'по доверенности №%1 от %2 выданной %3 %4'"),
		Шапка.ДоверенностьНомер, Формат(Шапка.ДоверенностьДата, "ДЛФ=ДД"),
		Шапка.ДоверенностьВыдана, Шапка.ДоверенностьЧерезКого);
		ДанныеДляПечати.Вставить("Доверенность", Доверенность);
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

Процедура ПерезаполнитьСуммыПоУЕвРублях(СФ, ДанныеДляПечати, ТекущееОснование)
	
	ДокументОбъект = ТекущееОснование.ПолучитьОбъект();
	ЕстьДокументыРасчетов = ДокументОбъект.Метаданные().ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено;
	
	// Вычислим курс документа для печати
	Если СФ.ВалютаДокумента <> мВалютаРегламентированногоУчета
		И СФ.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах
		И СФ.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом 
		И ЕстьДокументыРасчетов Тогда
				
		ИмяДокумента = ДокументОбъект.Метаданные().Имя;		
		
		ЗапросКурсАванса = Новый Запрос;
		ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", ТекущееОснование);
		ЗапросКурсАванса.Текст =
		"ВЫБРАТЬ
		|	Док.СуммаВзаиморасчетов,
		|	Док.СуммаРегл
		|ИЗ 
		|	Документ." + ИмяДокумента + ".ДокументыРасчетовСКонтрагентом КАК Док
		|ГДЕ Док.Ссылка = &ДокументСсылка
		|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
		
		Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Выборка.Следующий() Тогда
			КурсОплаты                 = ?(Выборка.СуммаВзаиморасчетов = 0, 0, Выборка.СуммаРегл/Выборка.СуммаВзаиморасчетов);
			ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			ВыборкаСуммаРегл           = Выборка.СуммаРегл;
		Иначе
			КурсОплаты                 = 0;
			ВыборкаСуммаВзаиморасчетов = 0;
			ВыборкаСуммаРегл           = 0;
		КонецЕсли;
		
		СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОбъект),
		СФ.ВалютаДокумента, СФ.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета), ТекущееОснование.КурсВзаиморасчетов,
		ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета), ТекущееОснование.КратностьВзаиморасчетов);
		НеоплаченнаяСумма = СуммаВзаиморасчетов - ВыборкаСуммаВзаиморасчетов;
		Если НеоплаченнаяСумма > 0 Тогда
			КурсДляПечати = (НеоплаченнаяСумма * ТекущееОснование.КурсВзаиморасчетов + ВыборкаСуммаРегл)/(НеоплаченнаяСумма + ВыборкаСуммаВзаиморасчетов);
		Иначе
			КурсДляПечати = КурсОплаты;
		КонецЕсли;
		
		Если КурсДляПечати = 0 Тогда
			Курс = ТекущееОснование.КурсВзаиморасчетов;
			Кратность = ТекущееОснование.КратностьВзаиморасчетов;
		Иначе
			Курс = КурсДляПечати;
			Кратность = 1;
		КонецЕсли;
		
	Иначе
		
		Курс = ЗаполнениеДокументов.КурсДокумента(ТекущееОснование.ПолучитьОбъект(), мВалютаРегламентированногоУчета);
		Кратность = ЗаполнениеДокументов.КратностьДокумента(ТекущееОснование.ПолучитьОбъект(), мВалютаРегламентированногоУчета);
		
	КонецЕсли;
			
	Для Каждого СтрокаСчетаФактуры Из ДанныеДляПечати.ТабличнаяЧасть Цикл
		
		СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма * Курс / Кратность;
		СтрокаСчетаФактуры.СуммаНДС = СтрокаСчетаФактуры.СуммаНДС * Курс / Кратность;
		
	КонецЦикла;
	ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(0, "Цена");
		
КонецПроцедуры

Функция ЭтоПБОЮЛ(Организация)
	
	Возврат (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	
КонецФункции

Функция ИнициализацияТаблицыСтрок()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("ТоварКод");
	Товары.Колонки.Добавить("ТоварАртикул");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("НомерСтроки");

	Возврат Товары;

КонецФункции

Функция СФПечатьУниверсальногоПередаточногоДокумента(ДанныеДляПечати, ТабДокумент = Неопределено) Экспорт

	Макет = ПолучитьМакет("УниверсальныйПередаточныйДокумент");
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	ВывестиПодвалУниверсальногоПередаточногоДокументаВТабличныйДокумент(ТабДокумент, Макет, ДанныеДляПечати);
	
	Возврат ТабДокумент;

КонецФункции

Функция СформироватьСтрокуСимволов(Знач Символ, Знач ДлинаСтроки) Экспорт
	
	Результат = "";
	Для Счетчик = 1 По ДлинаСтроки Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанныеПоВозвратуТоваровПоставщику(СФ, ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	               |	ВозвратТоваровПоставщику.Организация,
	               |	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ""он же""
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузоотправитель
	               |	КОНЕЦ КАК Грузоотправитель,
	               |	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	               |	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ВозвратТоваровПоставщику.Контрагент
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	               |	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	               |	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	               |		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	1 КАК НомерТЧ,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СФ.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СФ.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;

КонецФункции

Функция СобратьДанныеСФнаАвансИСуммовуюРазницу(СФ, ТекущееОснование)
	
	Если СФ.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
		ИЛИ СФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	мНадписьПредоплата = ?(СФ.Дата >= '20060101', "Предварительная оплата", "Авансовый платеж");
	НадписьНаименование = мНадписьПредоплата;
	
	Запрос = Новый Запрос;
 	Запрос.УстановитьПараметр("Ссылка", СФ.Ссылка);
 	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Организация,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.НомерИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Исправление
	|			ТОГДА СчетФактураВыданный.ДатаИсходногоДокумента
	|		ИНАЧЕ СчетФактураВыданный.Дата
	|	КОНЕЦ КАК Дата,
	|	СчетФактураВыданный.Организация КАК Поставщик,
	|	СчетФактураВыданный.Контрагент КАК Покупатель,
	|	&ВалютаРегламентированногоУчета КАК Валюта,
	|	СчетФактураВыданный.Сумма КАК Сумма,
	|	СчетФактураВыданный.СуммаНДС КАК СуммаНДС,
	|	СчетФактураВыданный.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            Шапка.Номер);
	ДанныеДляПечати.Вставить("Дата",             Шапка.Дата);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
	
	Товары = ИнициализацияТаблицыСтрок();
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СчетФактураВыданныйАвансы.Номенклатура КАК Товар,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	               |	СУММА(СчетФактураВыданныйАвансы.Сумма) КАК Сумма,
	               |	СУММА(СчетФактураВыданныйАвансы.СуммаНДС) КАК СуммаНДС,
	               |	СчетФактураВыданныйАвансы.СтавкаНДС,
	               |	СчетФактураВыданныйАвансы.Номенклатура.Код КАК ТоварКод,
	               |	СчетФактураВыданныйАвансы.Номенклатура.Артикул КАК ТоварАртикул,
	               |	МИНИМУМ(СчетФактураВыданныйАвансы.НомерСтроки) КАК НомерСтроки
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	               |ГДЕ
	               |	СчетФактураВыданныйАвансы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СчетФактураВыданныйАвансы.СтавкаНДС,
	               |	СчетФактураВыданныйАвансы.Номенклатура,
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	               |	ВЫРАЗИТЬ(СчетФактураВыданныйАвансы.Содержание КАК СТРОКА(1000)),
	               |	СчетФактураВыданныйАвансы.Номенклатура.Код,
	               |	СчетФактураВыданныйАвансы.Номенклатура.Артикул
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	ТаблицаПоАвансам = Запрос.Выполнить().Выгрузить();
				
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.БезНДС);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.ПустаяСсылка(), Перечисления.СтавкиНДС.БезНДС);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоАвансам Цикл
		
		Строчка = Товары.Добавить();
		Строчка.Товар               = ?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СтрокаТаблицы.Товар, НадписьНаименование);
		Строчка.ТоварНаименование   = ?(ЗначениеЗаполнено(СокрЛП(СтрокаТаблицы.Содержание)), СокрЛП(СтрокаТаблицы.Содержание), 
										?(ЗначениеЗаполнено(СтрокаТаблицы.Товар), СокрЛП(СтрокаТаблицы.ТоварНаименование), НадписьНаименование));
		Строчка.СтранаПроисхождения = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.СуммаВключаетНДС    = Истина;
		Строчка.СтавкаНДС 			= СтрокаТаблицы.СтавкаНДС;
		Строчка.СуммаНДС  			= СтрокаТаблицы.СуммаНДС;
		Строчка.Сумма     			= СтрокаТаблицы.Сумма;
		Строчка.ТоварКод            = СтрокаТаблицы.ТоварКод;
		Строчка.ТоварАртикул        = СтрокаТаблицы.ТоварАртикул;
		Строчка.НомерСтроки         = СтрокаТаблицы.НомерСтроки;
		
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);
	ДанныеДляПечати.Вставить("ТолькоУслуги",   Истина);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеСФнаАвансИСуммовуюРазницу()

Функция СобратьДанныеПоОтчетКомитентуОПродажах(СФ, ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	Подразделение КАК Подразделение,
	|	Контрагент    КАК Покупатель,
	|	СуммаДокумента          КАК Сумма,
	|	СтавкаНДСВознаграждения КАК СтавкаНДС,
	|	ВалютаДокумента         КАК Валюта,
	|	Товары.(
	|		СУММА(СуммаВознаграждения) КАК Сумма,
	|		СУММА(СуммаНДСВознаграждения) КАК СуммаНДС
	|	)
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка = &ДокументОснование";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СФ.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СФ.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", );
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  );
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Если ВыборкаСтрокТовары.Следующий() Тогда
		Строчка = Товары.Добавить();
		Строчка.Товар               = "Комиссионное вознаграждение";
		Строчка.ТоварНаименование   = "Комиссионное вознаграждение";
		Строчка.ТоварКод            = "";
		Строчка.ТоварАртикул        = "";
		Строчка.СтранаПроисхождения = "";
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны = "";
		Строчка.НомерГТД            = "";
		Строчка.ПредставлениеГТД    = "";
		Строчка.Количество          = 0;
		Строчка.ЕдиницаИзмерения    = "";
		Строчка.ЕдиницаИзмеренияКод = "";
		Строчка.СтавкаНДС           = Шапка.СтавкаНДС;
		СуммаДляПечати              = ?(ВыборкаСтрокТовары.Сумма = Null, 0, ВыборкаСтрокТовары.Сумма);
		Строчка.СуммаВключаетНДС    = Истина;
		Строчка.СуммаНДС            = ?(ВыборкаСтрокТовары.СуммаНДС = Null, 0, ВыборкаСтрокТовары.СуммаНДС);
		Строчка.Сумма               = СуммаДляПечати;
		Строчка.Цена                = 0;
	КонецЕсли;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ДанныеДляПечати.Вставить("ФИОКладовщика", 			Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ДолжностьКладовщика", 	Руководители.РуководительДолжность);

	Возврат ДанныеДляПечати;

КонецФункции

Функция СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ(СФ, ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	РеквизитыДокОснования = ЗначенияРеквизитовОбъекта(ДокОснование, "Дата, Склад");
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", РеквизитыДокОснования.Склад);
	Запрос.УстановитьПараметр("ДатаСреза", 			РеквизитыДокОснования.Дата);

	Запрос.Текст = "ВЫБРАТЬ
	               |	ВозвратТоваровПоставщику.Дата КАК ДатаДокумента,
	               |	ВозвратТоваровПоставщику.Организация,
	               |	ВозвратТоваровПоставщику.Организация КАК Поставщик,
	               |	""он же"" КАК Грузоотправитель,
	               |	ВозвратТоваровПоставщику.Подразделение КАК Подразделение,
	               |	ВозвратТоваровПоставщику.Контрагент КАК Покупатель,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ВозвратТоваровПоставщику.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	               |			ТОГДА ВозвратТоваровПоставщику.Контрагент
	               |		ИНАЧЕ ВозвратТоваровПоставщику.Грузополучатель
	               |	КОНЕЦ КАК Грузополучатель,
	               |	ВозвратТоваровПоставщику.СуммаДокумента КАК Сумма,
	               |	ВозвратТоваровПоставщику.ВалютаДокумента КАК Валюта,
	               |	ВозвратТоваровПоставщику.УчитыватьНДС КАК УчитыватьНДС,
	               |	ВозвратТоваровПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	ЕСТЬNULL(ОтветственныеЛица.ФизическоеЛицо, НЕОПРЕДЕЛЕНО) КАК ОтветственноеЛицо
	               |ИЗ
	               |	Документ.ВозвратТоваровПоставщикуИзНТТ КАК ВозвратТоваровПоставщику
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	               |		ПО ВозвратТоваровПоставщику.Склад = ОтветственныеЛица.СтруктурнаяЕдиница
	               |ГДЕ
	               |	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяЕдиница", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ВозвратТоваровПоставщикуТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
	|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
	|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
	|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
	|	ВозвратТоваровПоставщикуТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры КАК Серия,
	|	ВозвратТоваровПоставщикуТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТоваровПоставщикуТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ВозвратТоваровПоставщикуТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Код КАК ТоварКод,
	|	ВозвратТоваровПоставщикуТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.ВозвратТоваровПоставщикуИзНТТ.Товары КАК ВозвратТоваровПоставщикуТовары
	|ГДЕ
	|	ВозвратТоваровПоставщикуТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СФ.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СФ.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Шапка.СуммаВключаетНДС;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, (ВыборкаСтрокТовары.Сумма - ?(Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0)) / ВыборкаСтрокТовары.Количество));
		Строчка.СтавкаНДС           = ?(Шапка.УчитыватьНДС, ВыборкаСтрокТовары.СтавкаНДС, Перечисления.СтавкиНДС.БезНДС);
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	Если ЗначениеЗаполнено(Шапка.ОтветственноеЛицо) Тогда
		ДанныеДляПечати.Вставить("КладовщикДляУПД", 				Шапка.ОтветственноеЛицо);
		ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			Шапка.ДатаДокумента);
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", 	Неопределено)
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоВозвратуТоваровПоставщикуИзНТТ()

Функция СобратьДанныеПоОтчетКомиссионераОПродажах(СФ, ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("Ссылка", СФ.Ссылка);
 	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.КлючСтроки,
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель
	|ПОМЕСТИТЬ ВТДанныеОПокупателе
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &ДокументОснование
	|	И ОтчетКомиссионераОПродажахПокупатели.СчетФактура = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Организация,
	|	ОтчетКомиссионераОПродажах.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВТДанныеОПокупателе.Покупатель КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОтчетКомиссионераОПродажах.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ВТДанныеОПокупателе.Покупатель
	|		ИНАЧЕ ОтчетКомиссионераОПродажах.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ОтчетКомиссионераОПродажах.Подразделение КАК Подразделение,
	|	ОтчетКомиссионераОПродажах.ВалютаДокумента КАК Валюта,
	|	ОтчетКомиссионераОПродажах.УчитыватьНДС,
	|	ОтчетКомиссионераОПродажах.СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах,
	|	ВТДанныеОПокупателе КАК ВТДанныеОПокупателе
	|ГДЕ
	|	ОтчетКомиссионераОПродажах.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ОтчетКомиссионераОПродажахТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(200)) КАК ТоварНаименование,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения,
	|	ОтчетКомиссионераОПродажахТовары.Цена,
	|	ОтчетКомиссионераОПродажахТовары.Количество,
	|	ОтчетКомиссионераОПродажахТовары.Сумма,
	|	ОтчетКомиссионераОПродажахТовары.СтавкаНДС,
	|	ОтчетКомиссионераОПродажахТовары.СуммаНДС,
	|	ОтчетКомиссионераОПродажахТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры КАК Серия,
	|	ОтчетКомиссионераОПродажахТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	ОтчетКомиссионераОПродажахТовары.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Код КАК ТоварКод,
	|	ОтчетКомиссионераОПродажахТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	ОтчетКомиссионераОПродажахТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТДанныеОПокупателе КАК ДанныеОПокупателе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ПО ДанныеОПокупателе.КлючСтроки = ОтчетКомиссионераОПродажахТовары.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаШапка = Результат[1].Выгрузить();
	Шапка = ТаблицаШапка[0];
	ВыборкаСтрокТовары = Результат[2].Выбрать();
	
	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СФ.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СФ.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Подразделение",    Шапка.Подразделение);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл
		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)  + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.ПредставлениеСтраны = ?(Не ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС    = Шапка.СуммаВключаетНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.Цена                = ВыборкаСтрокТовары.Цена;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;
	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтчетКомиссионераОПродажах()

Функция СобратьДанныеПоОтражениюРеализацииТоваровИУслуг(СФ, ДокОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст = "ВЫБРАТЬ
	|	Организация,
	|	Организация   КАК Поставщик,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же"" 
	|		ИНАЧЕ Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Контрагент    КАК Покупатель,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА Контрагент 
	|		ИНАЧЕ Грузополучатель 
	|	КОНЕЦ КАК Грузополучатель,
	|	СуммаДокумента	 КАК Сумма,
	|	""""			 КАК Валюта,
	|	Истина			 КАК УчитыватьНДС,
	|	Ложь			 КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.ОтражениеРеализацииТоваровИУслугНДС КАК ОтражениеРеализацииТоваровИУслугНДС
	|
	|ГДЕ
	|	ОтражениеРеализацииТоваровИУслугНДС.Ссылка = &ДокументОснование";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокОснование);
	Запрос.УстановитьПараметр("ПустаяСтранаПроисхождения", Справочники.КлассификаторСтранМира.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойНомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура КАК Товар,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Представление КАК ТоварНаименование,
	               |	&ПустаяСтранаПроисхождения КАК СтранаПроисхождения,
	               |	"""" КАК ПредставлениеСтраны,
	               |	&ПустойНомерГТД КАК НомерГТД,
	               |	"""" КАК ПредставлениеГТД,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Количество,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ПредставлениеЕдиницыИзмерения,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Цена,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СтавкаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.СуммаНДС,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Сумма,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Код КАК ТоварКод,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Номенклатура.Артикул КАК ТоварАртикул,
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Документ.ОтражениеРеализацииТоваровИУслугНДС.ТоварыИУслуги КАК ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги
	               |ГДЕ
	               |	ОтражениеРеализацииТоваровИУслугНДСТоварыИУслуги.Ссылка = &ДокументОснование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	ДанныеДляПечати = Новый Структура();
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            СФ.Номер);
	ДанныеДляПечати.Вставить("Дата",             СФ.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         СФ.НомерПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("ДатаПРД",          СФ.ДатаПлатежноРасчетногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Шапка.Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Шапка.Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            0);
	ДанныеДляПечати.Вставить("Валюта",           мВалютаРегламентированногоУчета);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Истина);

	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, СФ.Дата,);
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		Строчка = Товары.Добавить();
		Строчка.Товар               = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование   = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.СтранаПроисхождения = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.СтранаПроисхожденияКод = "";
		Строчка.ПредставлениеСтраны = ВыборкаСтрокТовары.ПредставлениеСтраны;
		Строчка.НомерГТД            = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД    = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество          = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ПредставлениеЕдиницыИзмерения;
		Строчка.ЕдиницаИзмерения    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.СуммаВключаетНДС	= Ложь;
		Строчка.Цена                = ?(ВыборкаСтрокТовары.Цена <> 0, ВыборкаСтрокТовары.Цена, 
		                                ?(ВыборкаСтрокТовары.Количество = 0, 0, ВыборкаСтрокТовары.Сумма / ВыборкаСтрокТовары.Количество));
		Строчка.Сумма               = ВыборкаСтрокТовары.Сумма;
		Строчка.СуммаНДС            = ВыборкаСтрокТовары.СуммаНДС;
		Строчка.СтавкаНДС           = ВыборкаСтрокТовары.СтавкаНДС;
		Строчка.ТоварКод            = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул        = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.НомерСтроки         = ВыборкаСтрокТовары.НомерСтроки;

	КонецЦикла;

	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоОтражениюРеализацииТоваровИУслуг()

Функция СобратьДанныеДляПечатиКорректировочногоСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки
	|ПОМЕСТИТЬ ВТИсходныйДокумент
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТИсходныйДокумент.Организация,
	|	ВТИсходныйДокумент.Покупатель,
	|	ВТИсходныйДокумент.Грузополучатель,
	|	ВТИсходныйДокумент.Поставщик,
	|	ВТИсходныйДокумент.Грузоотправитель,
	|	ВТИсходныйДокумент.Сумма,
	|	ВТИсходныйДокумент.Валюта,
	|	ВТИсходныйДокумент.УчитыватьНДС,
	|	ВТИсходныйДокумент.СуммаВключаетНДС
	|ИЗ
	|	ВТИсходныйДокумент КАК ВТИсходныйДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	
	ДанныеДляПечати.Вставить("Организация",       Шапка.Организация);
	ДанныеДляПечати.Вставить("Поставщик",         Поставщик);
	ДанныеДляПечати.Вставить("Валюта",			  Шапка.Валюта);
	ДанныеДляПечати.Вставить("Покупатель",        Шапка.Покупатель);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС",  Шапка.СуммаВключаетНДС);
	
	РеквизитыСФ = ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Исправление");
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, РеквизитыСФ.Дата);
	
	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Ссылка,
	|	КорректировкаРеализацииТовары.НомерСтроки КАК НомерСтроки,
	|	КорректировкаРеализацииТовары.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НаименованиеТовара,
	|	КорректировкаРеализацииТовары.СерияНоменклатуры КАК Серия,
	|	КорректировкаРеализацииТовары.ХарактеристикаНоменклатуры КАК Характеристика,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	КорректировкаРеализацииТовары.СтавкаНДС,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК СуммаНДСПослеИзменения,
	|	КорректировкаРеализацииТовары.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииТовары.Количество КАК КоличествоПослеИзменения,
	|	КорректировкаРеализацииТовары.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) / КорректировкаРеализацииТовары.Количество
	|					ИНАЧЕ КорректировкаРеализацииТовары.Сумма / КорректировкаРеализацииТовары.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаПослеИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииТовары.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения) / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения / КорректировкаРеализацииТовары.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма
	|	КОНЕЦ КАК СтоимостьБезНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения
	|	КОНЕЦ КАК СтоимостьБезНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.Сумма
	|		ИНАЧЕ КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС
	|	КОНЕЦ КАК СтоимостьСНДСПослеИзменения,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|	КОНЕЦ КАК СтоимостьСНДСДоИзменения,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУменьшение,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииТовары.СуммаНДСДоИзменения - КорректировкаРеализацииТовары.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазницаНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма - КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаБезНДСУвеличение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма > 0
	|						ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУменьшение,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения - КорректировкаРеализацииТовары.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииТовары.СуммаДоИзменения + КорректировкаРеализацииТовары.СуммаНДСДоИзменения - (КорректировкаРеализацииТовары.Сумма + КорректировкаРеализацииТовары.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК РазницаСНДСУвеличение,
	|	КорректировкаРеализацииТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
	|	1 КАК НомерТЧ,
	|	КорректировкаРеализацииТовары.Номенклатура.Код КАК ТоварКод,
	|	КорректировкаРеализацииТовары.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииТовары.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииТовары.Количество <> КорректировкаРеализацииТовары.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Сумма <> КорректировкаРеализацииТовары.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.СуммаНДС <> КорректировкаРеализацииТовары.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииТовары.Цена <> КорректировкаРеализацииТовары.ЦенаДоИзменения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииУслуги.Ссылка,
	|	КорректировкаРеализацииУслуги.НомерСтроки,
	|	КорректировкаРеализацииУслуги.Номенклатура,
	|	ВЫРАЗИТЬ(КорректировкаРеализацииУслуги.Содержание КАК СТРОКА(1000)),
	|	NULL,
	|	NULL,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков,
	|	КорректировкаРеализацииУслуги.СтавкаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДСДоИзменения,
	|	КорректировкаРеализацииУслуги.Количество,
	|	КорректировкаРеализацииУслуги.КоличествоДоИзменения,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.Количество = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) / КорректировкаРеализацииУслуги.Количество
	|					ИНАЧЕ КорректировкаРеализацииУслуги.Сумма / КорректировкаРеализацииУслуги.Количество
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА КорректировкаРеализацииУслуги.КоличествоДоИзменения = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения) / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|					ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения / КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)),
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.Сумма
	|		ИНАЧЕ КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения
	|		ИНАЧЕ КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС > 0
	|			ТОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС < 0
	|			ТОГДА (КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - КорректировкаРеализацииУслуги.СуммаНДС) * -1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма - КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма > 0
	|						ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) > 0
	|					ТОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИсходныйДокумент.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма < 0
	|						ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения - КорректировкаРеализацииУслуги.Сумма) * -1
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС) < 0
	|					ТОГДА (КорректировкаРеализацииУслуги.СуммаДоИзменения + КорректировкаРеализацииУслуги.СуммаНДСДоИзменения - (КорректировкаРеализацииУслуги.Сумма + КорректировкаРеализацииУслуги.СуммаНДС)) * -1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ,
	|	КорректировкаРеализацииУслуги.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	2,
	|	КорректировкаРеализацииУслуги.Номенклатура.Код,
	|	КорректировкаРеализацииУслуги.Номенклатура.Артикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК КорректировкаРеализацииУслуги,
	|	ВТИсходныйДокумент КАК ИсходныйДокумент
	|ГДЕ
	|	КорректировкаРеализацииУслуги.Ссылка = &ДокументОснование
	|	И (КорректировкаРеализацииУслуги.Количество <> КорректировкаРеализацииУслуги.КоличествоДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Сумма <> КорректировкаРеализацииУслуги.СуммаДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.СуммаНДС <> КорректировкаРеализацииУслуги.СуммаНДСДоИзменения
	|			ИЛИ КорректировкаРеализацииУслуги.Цена <> КорректировкаРеализацииУслуги.ЦенаДоИзменения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	НомерСтроки";
	
	Если РеквизитыСФ.Исправление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДоИзменения", "ДоКорректировки");
	КонецЕсли;
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого Колонка Из ТаблицаРезультата.Колонки Цикл
		Колонка.Имя = СтрЗаменить(Колонка.Имя, "ДоКорректировки", "ДоИзменения");
	КонецЦикла;
	
	Для каждого Строчка Из ТаблицаРезультата Цикл
		Строчка.НаименованиеТовара = СокрЛП(Строчка.НаименованиеТовара) + ФормированиеПечатныхФорм.ПредставлениеСерий(Строчка);
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", ТаблицаРезультата); 
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеДляПечатиКорректировочногоСчетаФактуры

Функция СобратьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КорректировкаРеализации.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	КорректировкаРеализации.СуммаДокумента КАК Сумма,
	|	КорректировкаРеализации.ВалютаДокумента КАК Валюта,
	|	КорректировкаРеализации.УчитыватьНДС КАК УчитыватьНДС,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,		
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ДокументОснование";

	ЗапросПоТоварам = Новый Запрос();
	ЗапросПоТоварам.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	ЗапросПоТоварам.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПоТоварам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоТоварам.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(ТаблицаПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТаблицаПоТоварам.СерияНоменклатуры.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД КАК НомерГТД,
	|	ТаблицаПоТоварам.СерияНоменклатуры.НомерГТД.Представление КАК ПредставлениеГТД,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ТаблицаПоТоварам.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаПоТоварам.Количество,
	|	ТаблицаПоТоварам.Цена,
	|	ТаблицаПоТоварам.Сумма,
	|	ТаблицаПоТоварам.СуммаНДС,
	|	ТаблицаПоТоварам.СтавкаНДС,
	|	ТаблицаПоТоварам.СерияНоменклатуры КАК Серия,
	|	ТаблицаПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика,
	|	""Товары"" КАК ВидПоступления,
	|	ТаблицаПоТоварам.Номенклатура.Код КАК ТоварКод,
	|	ТаблицаПоТоварам.Номенклатура.Артикул КАК ТоварАртикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Товары КАК ТаблицаПоТоварам
	|ГДЕ
	|	ТаблицаПоТоварам.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоУслугам.НомерСтроки,
	|	ТаблицаПоУслугам.Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаПоУслугам.Содержание КАК СТРОКА(1000)),
	|	""Россия"",
	|	NULL,
	|	""Россия"",
	|	"""",
	|	"""",
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков,
	|	ТаблицаПоУслугам.Номенклатура.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору.Код,
	|	ТаблицаПоУслугам.Количество,
	|	ТаблицаПоУслугам.Цена,
	|	ТаблицаПоУслугам.Сумма,
	|	ТаблицаПоУслугам.СуммаНДС,
	|	ТаблицаПоУслугам.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	""Услуги"",
	|	ТаблицаПоУслугам.Номенклатура.Код,
	|	ТаблицаПоУслугам.Номенклатура.Артикул
	|ИЗ
	|	Документ.КорректировкаРеализации.Услуги КАК ТаблицаПоУслугам
	|ГДЕ
	|	ТаблицаПоУслугам.Ссылка = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПоступления,
	|	НомерСтроки";

	Шапка = Запрос.Выполнить().Выбрать();
	ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
    	
	Шапка.Следующий();
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	
	РеквизитыСФ = ПолучитьЗначенияРеквизитов(Ссылка, "Дата,Номер,НомерИсходногоДокумента,ДатаИсходногоДокумента");
    	
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            РеквизитыСФ.НомерИсходногоДокумента);
	ДанныеДляПечати.Вставить("Дата",             РеквизитыСФ.ДатаИсходногоДокумента);
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);
	
	Руководители = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизации(Шапка.Организация, РеквизитыСФ.Дата);

	ДанныеДляПечати.Вставить(?(ЭтоПБОЮЛ(Шапка.Организация), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.Руководитель);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтер);

	Товары = ИнициализацияТаблицыСтрок();

	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	
	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		ЕстьТовары = ЕстьТовары ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Товары";
		ЕстьУслуги = ЕстьУслуги ИЛИ ВыборкаСтрокТовары.ВидПоступления = "Услуги";
		
		Строчка = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Строчка, ВыборкаСтрокТовары);
		Строчка.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Строчка.СуммаВключаетНДС  = Шапка.СуммаВключаетНДС;

	КонецЦикла;

	Если НЕ ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель = "";		
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", Товары);

	// Параметры для универсального передаточного документа: ФИО и должность того, кто передал товар/сдал услуги, результаты работ, права
	ТипДокументаРеализации = ТипЗнч(Шапка.ДокументРеализации);
	Если ТипДокументаРеализации = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РеквизитыШапки = ЗначенияРеквизитовОбъекта(Шапка.ДокументРеализации, "ОтпускПроизвел, ОтпускРазрешил");
		Если ЕстьТовары И ЗначениеЗаполнено(РеквизитыШапки.ОтпускПроизвел) Тогда
			ДанныеДляПечати.Вставить("КладовщикДляУПД", 				РеквизитыШапки.ОтпускПроизвел);
			ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 			РеквизитыСФ.Дата);
		ИначеЕсли ЕстьУслуги Тогда
			Если ЗначениеЗаполнено(РеквизитыШапки.ОтпускРазрешил) Тогда
				ДанныеДляПечати.Вставить("КладовщикДляУПД", 			РеквизитыШапки.ОтпускРазрешил);
				ДанныеДляПечати.Вставить("ДатаДокументаДляУПД", 		РеквизитыСФ.Дата);
			Иначе	
				ДанныеДляПечати.Вставить("ФИОКладовщика", 				Руководители.Руководитель);
				ДанныеДляПечати.Вставить("ДолжностьКладовщика", 		Руководители.РуководительДолжность);
			КонецЕсли;
		КонецЕсли;
		ДанныеДляПечати.Вставить("ЗаКладовщикаПоПриказуДляУПД", Неопределено)
	КонецЕсли;

	Возврат ДанныеДляПечати;
		
КонецФункции // СобратьДанныеДляПечатиИсправленияСчетаФактуры

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ (ТонкийКлиент ИЛИ ВебКлиент) Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1,	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	Если СтрокаПодстановки = Неопределено ИЛИ СтрДлина(СтрокаПодстановки) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	НачПозиция = 1;
	Позиция = 1;
	Пока Позиция <= СтрДлина(СтрокаПодстановки) Цикл
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		Если СимволСтроки <> "%" Тогда
			Позиция = Позиция + 1;
			Продолжить;
		КонецЕсли;
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, Позиция - НачПозиция);
		Позиция = Позиция + 1;
		СимволСтроки = Сред(СтрокаПодстановки, Позиция, 1);
		
		Если СимволСтроки = "%" Тогда
			Позиция = Позиция + 1;
			НачПозиция = Позиция;
			Результат = Результат + "%";
			Продолжить;
		КонецЕсли;
		
		Попытка
			НомерПараметра = Число(СимволСтроки);
		Исключение
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + СимволСтроки);
		КонецПопытки;
		
		Если СимволСтроки = "1" Тогда
			ЗначениеПараметра = Параметр1;
		ИначеЕсли СимволСтроки = "2" Тогда
			ЗначениеПараметра = Параметр2;
		ИначеЕсли СимволСтроки = "3" Тогда
			ЗначениеПараметра = Параметр3;
		ИначеЕсли СимволСтроки = "4" Тогда
			ЗначениеПараметра = Параметр4;
		ИначеЕсли СимволСтроки = "5" Тогда
			ЗначениеПараметра = Параметр5;
		ИначеЕсли СимволСтроки = "6" Тогда
			ЗначениеПараметра = Параметр6;
		ИначеЕсли СимволСтроки = "7" Тогда
			ЗначениеПараметра = Параметр7;
		ИначеЕсли СимволСтроки = "8" Тогда
			ЗначениеПараметра = Параметр8;
		ИначеЕсли СимволСтроки = "9" Тогда
			ЗначениеПараметра = Параметр9;
		Иначе
			ВызватьИсключение НСтр("ru='Входная строка СтрокаПодстановки имеет неверный формат: %'" + ЗначениеПараметра);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = "";
		Иначе
			ЗначениеПараметра = Строка(ЗначениеПараметра);
		КонецЕсли;
		Результат = Результат + ЗначениеПараметра;
		Позиция = Позиция + 1;
		НачПозиция = Позиция;
	
	КонецЦикла;
	
	Если (НачПозиция <= СтрДлина(СтрокаПодстановки)) Тогда
		Результат = Результат + Сред(СтрокаПодстановки, НачПозиция, СтрДлина(СтрокаПодстановки) - НачПозиция + 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт

	Если ТипЗнч(ИменаРеквизитов) = Тип("Структура") Тогда
		СтруктураРеквизитов = ИменаРеквизитов;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(ИменаРеквизитов);;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип второго параметра ИменаИлиСтруктураРеквизитов: %1'"), 
			Строка(ТипЗнч(ИменаРеквизитов)));
	КонецЕсли;

	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|" + ТекстПолей + "
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
		|ГДЕ
		|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
КонецФункции

Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ПолучитьЗначенияРеквизитов(Ссылка, ИмяРеквизита);
	Возврат Результат[ИмяРеквизита];
	
КонецФункции 

Функция СформироватьЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "") Экспорт
	
	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат ?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента) + " № " + ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументОбъект)
		                          + " от " + Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'") + " г.";
	КонецЕсли;

КонецФункции // СформироватьЗаголовокДокумента

Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, ЦелоеЧисло) Экспорт

	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

Функция ФамилияИнициалыФизЛица(Объект = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда 
		ФИО = РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"")
	КонецЕсли;
			
	КоличествоПодстрок = ФИО.Количество();
	Фамилия = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя		= ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество= ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(НЕ ПустаяСтрока(Фамилия), 
				Фамилия + ?(НЕ ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(НЕ ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				"");

КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
