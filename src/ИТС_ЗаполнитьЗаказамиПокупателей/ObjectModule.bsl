Перем мВалютаРегламентированногоУчета;

Процедура Инициализировать(Объект, ИмяТабличнойЧасти, ТабличноеПолеОбъекта) Экспорт
	Если Объект.Дата < НачалоДня(ТекущаяДата()) Тогда
		Ответ = Вопрос("Дата документа меньше сегодняшнего дня. Проследующее проведение этого документа может негативно отразиться на остатках. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Вопрос("Перед заполнением колонка ""Заказ"" будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Документ = Объект;
	
	ЗаполнитьЗаказы();
КонецПроцедуры

Процедура ЗаполнитьЗаказы() Экспорт
	// ищем в созданных заказах покупателя те заказы, которые не попали
	// в размещение заказов покупателей и в зарезервирование на складах
	// затем заполняем колонку Заказ
	// если в заказах покупателя количество недостаточно, то изменяем количество в заказе поставщику,
	// и добавляем новую строку с пустым значением в колонке Заказ
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказыПокупателейОстатки.Номенклатура,
	                      |	ЗаказыПокупателейОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
	                      |	ЗаказыПокупателейОстатки.ЗаказПокупателя,
	                      |	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры
	                      |ИЗ
	                      |	РегистрНакопления.ЗаказыПокупателей.Остатки(&Дата, Номенклатура В (&Номенклатура)) КАК ЗаказыПокупателейОстатки
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&Дата,) КАК ТоварыВРезервеНаСкладахОстатки
	                      |		ПО ЗаказыПокупателейОстатки.Номенклатура = ТоварыВРезервеНаСкладахОстатки.Номенклатура
	                      |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = ТоварыВРезервеНаСкладахОстатки.ХарактеристикаНоменклатуры
	                      |			И ЗаказыПокупателейОстатки.ЗаказПокупателя = ТоварыВРезервеНаСкладахОстатки.ДокументРезерва
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(&Дата, ) КАК РазмещениеЗаказовПокупателейОстатки
	                      |		ПО ЗаказыПокупателейОстатки.Номенклатура = РазмещениеЗаказовПокупателейОстатки.Номенклатура
	                      |			И ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры = РазмещениеЗаказовПокупателейОстатки.ХарактеристикаНоменклатуры
	                      |			И ЗаказыПокупателейОстатки.ЗаказПокупателя = РазмещениеЗаказовПокупателейОстатки.ЗаказПокупателя
	                      |ГДЕ
	                      |	ЗаказыПокупателейОстатки.КоличествоОстаток - ЕСТЬNULL(РазмещениеЗаказовПокупателейОстатки.КоличествоОстаток, 0) - ЕСТЬNULL(ТоварыВРезервеНаСкладахОстатки.КоличествоОстаток, 0) > 0");
	Запрос.УстановитьПараметр("Номенклатура", Документ.Товары.ВыгрузитьКолонку("Номенклатура"));
	//Запрос.УстановитьПараметр("ЗаказПоставщику", Документ.Ссылка);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Документ.Ссылка), Новый Граница(Документ.Ссылка.МоментВремени(), ВидГраницы.Исключая), ТекущаяДата()));
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Товар Из Документ.Товары Цикл
		Товар.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		
		ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры", Товар.Номенклатура, Товар.ХарактеристикаНоменклатуры);
		МассивСтрок = ТЗ.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого Строка Из МассивСтрок Цикл
			Если Строка.Количество > 0 Тогда
				Товар.Заказ = Строка.ЗаказПокупателя;
				Если Товар.Количество > Строка.Количество Тогда
					НоваяСтрокаТовара = Документ.Товары.Добавить();
					НоваяСтрокаТовара.Номенклатура = Товар.Номенклатура;
					НоваяСтрокаТовара.ХарактеристикаНоменклатуры = Товар.ХарактеристикаНоменклатуры;
					НоваяСтрокаТовара.Количество = Товар.Количество - Строка.Количество;
				
					ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрокаТовара, Документ, "Приобретение");
					
					СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Документ.Контрагент, Документ.ТипЦен, Документ.ДоговорКонтрагента, Документ.Дата, Документ.ВалютаДокумента, Документ.УчитыватьНДС, Документ.СуммаВключаетНДС);

					ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(НоваяСтрокаТовара, Документ, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Ложь);
					ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(НоваяСтрокаТовара, Документ);
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрокаТовара, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрокаТовара, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрокаТовара, Документ);
					ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(НоваяСтрокаТовара, Документ, мВалютаРегламентированногоУчета);
			
					Товар.Количество = Строка.Количество;
					
					ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(Товар, Документ);
					ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(Товар, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(Товар, Документ);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(Товар, Документ);
				
					Строка.Количество = 0;
					Прервать;
				Иначе
					Строка.Количество = Строка.Количество - Товар.Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();